{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":1,"timestamp":1737232582,"nonce":"Ry6eM97PKZeikclmop40YkGgFWY=","metadata":{"github-id":"I_kwDOJl1IZM6muW6s","github-url":"https://github.com/nikitabobko/AeroSpace/issues/1012","origin":"github"},"title":"Investigate a possibility to use `CGEvent.tapCreate` for global hotkeys","message":"Right now, we use Carbon API. It's a deprecated framework, but since a looot of apps use, I don't think that Apple is gonna drop it in foreseeable future\n\nThe alternative API I recently found is \nhttps://developer.apple.com/documentation/coregraphics/cgevent/1454426-tapcreate\nhttps://forums.developer.apple.com/forums/thread/735223\n\nCopying the response from apple forum in case it gets deleted:\n```\nI was recently asked a very similar question in a DTS incident. Pasted in below are the relevant snippets from my response.\n\nShare and Enjoy\n—\nQuinn “The Eskimo!” @ Developer Technical Support @ Apple\nlet myEmail = \"eskimo\" + \"1\" + \"@\" + \"apple.com\"\n\nThere are two parts to creating an app like this:\n\n  - Ensuring your app runs in the background (A)\n\n  - Monitoring key presses (B)\n\nI’ll cover each in turn.\n\nWith regards point A, running in the background, the approach I recommend is to split the core of your app off into a separate app that you then nest within your main app. Set the [LSUIElement property](https://developer.apple.com/documentation/bundleresources/information_property_list/lsuielement) on the nested app, so it doesn’t show up in the Dock or have its own menu bar.\n\nIn that nested app, use a [menu bar status item](https://developer.apple.com/documentation/appkit/menus_cursors_and_the_dock#2871629) to present your UI.\n\nNote If you’re using SwiftUI, there’s now a [SwiftUI equivalent](https://developer.apple.com/documentation/swiftui/scenes#creating-a-menu-bar-extra).\n\nIn your main app, have a UI to control whether the nested app runs as a login item, that is, runs while the user is logged in. Use the [SMAppService.loginItem(identifier:) method](https://developer.apple.com/documentation/servicemanagement/smappservice/3945411-loginitem) to configure this.\n\nIf you need to support older system, use the [SMLoginItemSetEnabled function](https://developer.apple.com/documentation/servicemanagement/1501557-smloginitemsetenabled) instead..\n\nIMPORTANT App Review has specific constraints about the use of login items. See clause 2.4.5(iii) of the [App Store Review Guidelines](https://developer.apple.com/app-store/review/).\n\nWith regards B, monitoring key presses, there are a variety of APIs to monitor keyboard events, including:\n\n  - The [CGEventTap subsystme](https://developer.apple.com/documentation/coregraphics/cgevent/1454426-tapcreate)\n\n  - AppKit’s [global event monitor](https://developer.apple.com/documentation/appkit/nsevent/1535472-addglobalmonitorforevents)\n\n  - RegisterEventHotKey\n\nOf these the one I like the most is RegisterEventHotKey. However, it’s intimately tied to the legacy Carbon toolbox and thus I can’t honestly recommend it.\n\nOf the remaining options, I prefer CGEventTap because of its interactions with TCC. More on this below.\n\nNote This is called CGEventTap because of the API name in C-based languages, CGEventTapCreate.\n\nTCC stands for Transparency, Consent, and Control. It’s the subsystem behind the privileges in System Settings \u003e Privacy and Security. To listen for keyboard events you’ll need the Input Monitoring privilege.\n\nOne reason I like CGEventTap is that it’s clearly associated with the APIs to determine whether you have that privilege (CGPreflightListenEventAccess) and to request that privilege (CGRequestListenEventAccess).\n\nCGEventTap is compatible with the App Sandbox, starting with macOS 10.15.\n\nCGEventTap is a bit tricky to use from Swift. See [this post](https://developer.apple.com/forums/thread/707680?answerId=716892022#716892022) for an example.\n```\n\nMaybe the alternative API allows to distinguish left and right modifiers (https://github.com/nikitabobko/AeroSpace/issues/28) and `fn` key (https://github.com/nikitabobko/AeroSpace/discussions/1011)","files":null}]}