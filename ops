{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":3,"timestamp":1731027444,"nonce":"bCrUz1cfw5inkqh9mtCprLlFTJg=","metadata":{"github-id":"IC_kwDOJl1IZM6S1qDM","github-url":"https://github.com/nikitabobko/AeroSpace/issues/131#issuecomment-2463539404"},"message":"Today I received a very generous $500 donation via GitHub Sponsorship from @liamaharon. I appreciate the support, thank you! It's the highest individual sponsorship I received, so it makes it clear how important this issue for you.\n\nAs for the issue, nothing significantly changed since my last update https://github.com/nikitabobko/AeroSpace/issues/131#issuecomment-2302135213 \n\nI understand the importance of this issue. Discussions, hacks people put in AeroSpace sources and the $500 donation make it clear. But I won't be giving any promises. The issue is fixed when it's fixed if it's fixed at all. Thanks everyone for your understanding\n\n---\n\nThe core architecture of AeroSpace is built around what I call `refreshSession`. It's an idempotent procedure that is run on every relevant event from macOS or the user itself (e.g. keybind). On every `refreshSession`, AeroSpace checks for newly appeared windows, checks that windows are still in the right position, and pushes them ~~down the macOS throat~~ in the right position.\n\nThis approach makes sure that we don't rely on reliability of macOS events being delivered to AeroSpace at all or being delivered in the right order (yes, macOS can just drop the event and not deliver it to apps, or if it does deliver it, it will very likely be in inconsistent order). Until macOS sends events that at least approximately look like something reasonable, AeroSpace can provide a reliable experience. I was pissed off by how often some other window managers loose track of windows, so I went with this hard approach, and very happy about it. Hopefully, you notice that AeroSpace *never* looses track of windows.\n\n\\\u003crant\u003eI took a shortcut and didn't implement the detection of closed windows in the same idempotent manner, because when the screen is locked, closed windows become indistinguishable from non-closed windows. Unironically, Apple decided to break specifically `kAXUIElementDestroyedNotification` event in Sequoia #445, ughh\\\u003c/rant\u003e\n\nThe flip side of the \"idempotent\"/\"recheck the whole world every time\" approach is performance. But I think it can be optimized, it just something that needs to be explicitly worked on, and worked very accurately without harming the correctness. I never spent time to properly optimize AeroSpace and macOS communication, so far I've been concerned only about the correctness and reproducibility (but still managed to get bitten by Sequoia #445).\n\nThanks to @raisjn for doing his performance experiments. The debouncing approach makes sense. The `refreshSession` may be called too often when a lot of things happen on the screen (e.g. when you switch the workspace), and given the idempotent nature of `refreshSession`, debouncing the whole session becomes trivial and may increase the app responsiveness. I don't agree with the specifics of implementation, but the general idea makes sense, thanks for your experiments. I will consider \"the debouncer\" approach when start working on performance.\n\nAnother known problem that I realized is that AeroSpace cares too much about correctness for *invisible* windows, and makes too much accessbility API requests because of that #545\n\nAs correctly pointed by @raisjn, please discuss the details of @raisjn fix in #655\n\nPlease, restrain from casually commenting in this issue, since it becomes unnecessarily long. If you want to say something, please say something that we don't know already.","files":null},{"type":6,"timestamp":1731027509,"nonce":"V1jtcwnYLmfRgfIbqIUv3cVHQfo=","metadata":{"github-id":"UCE_lALOJl1IZM6S1qDMzlSDf-M"},"target":"7c61cb6fbce755efa48e885359b562089cad8ee46e030e6145471f85d83b8eb2","message":"Today I received a very generous $500 donation via GitHub Sponsorship from @liamaharon. I appreciate the support, thank you! It's the highest individual sponsorship I received, so it makes it clear how important this issue for you.\n\nAs for the issue, nothing significantly changed since my last update https://github.com/nikitabobko/AeroSpace/issues/131#issuecomment-2302135213 \n\nI understand the importance of this issue. Discussions, hacks people put in AeroSpace sources and the $500 donation make it clear. But I won't be giving any promises. The issue is fixed when it's fixed if it's fixed at all. Thanks everyone for your understanding\n\n---\n\nThe core architecture of AeroSpace is built around what I call `refreshSession`. It's an idempotent procedure that is run on every relevant event from macOS or the user itself (e.g. keybind). On every `refreshSession`, AeroSpace checks for newly appeared windows, checks that windows are still in the right position, and pushes them ~~down the macOS throat~~ in the right position.\n\nThis approach makes sure that we don't rely on reliability of macOS events being delivered to AeroSpace at all or being delivered in the right order (yes, macOS can just drop the event and not deliver it to apps, or if it does deliver it, it will very likely be in inconsistent order). Until macOS sends events that at least approximately look like something reasonable, AeroSpace can provide a reliable experience. I was pissed off by how often some other window managers loose track of windows, so I went with this hard approach, and very happy about it. Hopefully, you notice that AeroSpace *never* looses track of windows.\n\n\\\u003crant\u003eI took a shortcut and didn't implement the detection of closed windows in the same idempotent manner, because when the screen is locked, closed windows become indistinguishable from non-closed windows. Unironically, Apple decided to break specifically `kAXUIElementDestroyedNotification` event in Sequoia #445, ughh\\\u003c/rant\u003e\n\nThe flip side of the \"idempotent\"/\"recheck the whole world every time\" approach is performance. But I think it can be optimized, it just something that needs to be explicitly worked on, and worked very accurately without harming the correctness. I never spent time to properly optimize AeroSpace and macOS communication, so far I've been concerned only about the correctness and reproducibility (but still managed to get bitten by Sequoia #445).\n\nThanks to @raisjn for doing the performance experiments. The debouncing approach makes sense. The `refreshSession` may be called too often when a lot of things happen on the screen (e.g. when you switch the workspace), and given the idempotent nature of `refreshSession`, debouncing the whole session becomes trivial and may increase the app responsiveness. I don't agree with the specifics of implementation, but the general idea makes sense, thanks for your experiments. I will consider \"the debouncer\" approach when start working on performance.\n\nAnother known problem that I realized is that AeroSpace cares too much about correctness for *invisible* windows, and makes too much accessbility API requests because of that #545\n\nAs correctly pointed by @raisjn, please discuss the details of @raisjn fix in #655\n\nPlease, restrain from casually commenting in this issue, since it becomes unnecessarily long. If you want to say something, please say something that we don't know already.","files":null},{"type":6,"timestamp":1731027984,"nonce":"KHVhHorc4hwFlZhgwL6K9ZWktEw=","metadata":{"github-id":"UCE_lALOJl1IZM6S1qDMzlSDnVU"},"target":"7c61cb6fbce755efa48e885359b562089cad8ee46e030e6145471f85d83b8eb2","message":"Today I received a very generous $500 donation via GitHub Sponsorship from @liamaharon. I didn't want for this to go unnoticed, I appreciate the support, thank you! It's the highest individual sponsorship I received, so it makes it clear how important this issue for you.\n\nAs for the issue, nothing significantly changed since my last update https://github.com/nikitabobko/AeroSpace/issues/131#issuecomment-2302135213 \n\nI understand the importance of this issue. Discussions, hacks people put in AeroSpace sources and the $500 donation make it clear. But I won't be giving any promises. The issue is fixed when it's fixed if it's fixed at all. Thanks everyone for your understanding\n\n---\n\nThe core architecture of AeroSpace is built around what I call `refreshSession`. It's an idempotent procedure that is run on every relevant event from macOS or the user itself (e.g. keybind). On every `refreshSession`, AeroSpace checks for newly appeared windows, checks that windows are still in the right position, and pushes them ~~down the macOS throat~~ in the right position.\n\nThis approach makes sure that we don't rely on reliability of macOS events being delivered to AeroSpace at all or being delivered in the right order (yes, macOS can just drop the event and not deliver it to apps, or if it does deliver it, it will very likely be in inconsistent order). Until macOS sends events that at least approximately look like something reasonable, AeroSpace can provide a reliable experience. I was pissed off by how often some other window managers loose track of windows, so I went with this hard approach, and very happy about it. Hopefully, you notice that AeroSpace *never* looses track of windows.\n\n\\\u003crant\u003eI took a shortcut and didn't implement the detection of closed windows in the same idempotent manner, because when the screen is locked, closed windows become indistinguishable from non-closed windows. Unironically, Apple decided to break specifically `kAXUIElementDestroyedNotification` event in Sequoia #445, ughh\\\u003c/rant\u003e\n\nThe flip side of the \"idempotent\"/\"recheck the whole world every time\" approach is performance. But I think it can be optimized, it just something that needs to be explicitly worked on, and worked very accurately without harming the correctness. I never spent time to properly optimize AeroSpace and macOS communication, so far I've been concerned only about the correctness and reproducibility (but still managed to get bitten by Sequoia #445).\n\nThanks to @raisjn for doing the performance experiments. The debouncing approach makes sense. The `refreshSession` may be called too often when a lot of things happen on the screen (e.g. when you switch the workspace), and given the idempotent nature of `refreshSession`, debouncing the whole session becomes trivial and may increase the app responsiveness. I don't agree with the specifics of implementation, but the general idea makes sense, thanks for your experiments. I will consider \"the debouncer\" approach when start working on performance.\n\nAnother known problem that I realized is that AeroSpace cares too much about correctness for *invisible* windows, and makes too much accessbility API requests because of that #545\n\nAs correctly pointed by @raisjn, please discuss the details of @raisjn fix in #655\n\nPlease, restrain from casually commenting in this issue, since it becomes unnecessarily long. If you want to say something, please say something that we don't know already.","files":null}]}