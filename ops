{"author":{"id":"2e9bfc8271bd12672ba9f0b213f466976af3f530da22455d7f82c083e0ef7e0d"},"ops":[{"type":3,"timestamp":1735448289,"nonce":"VhjV/WnHR5g6QXwag/YJDL/e5pU=","metadata":{"github-id":"IC_kwDOJl1IZM6Y3OXh","github-url":"https://github.com/nikitabobko/AeroSpace/issues/2#issuecomment-2564613601"},"message":"\u003e I've updated @farzadmf 's script with support for different pip window titles. I tried to get it to support multple pip windows at once but no luck yet.\n\u003e \n\u003e ```shell\n\u003e #!/usr/bin/env sh\n\u003e # This seems to only work a single pip window at a time for now\n\u003e \n\u003e ws=${1:-$AEROSPACE_FOCUSED_WORKSPACE}\n\u003e \n\u003e IFS=$'\\n' all_wins=$(aerospace list-windows --all --format '%{window-id}|%{app-name}|%{window-title}|%{monitor-id}|%{workspace}')\n\u003e IFS=$'\\n' all_ws=$(aerospace list-workspaces --all --format '%{workspace}|%{monitor-id}')\n\u003e \n\u003e # Array of possible window titles\n\u003e pip_titles=(\"Picture-in-picture\" \"Picture-in-Picture\" \"Picture in Picture\" \"Picture in picture\")\n\u003e \n\u003e # Function to find matching PIP windows\n\u003e find_pip_windows() {\n\u003e   local titles=(\"$@\")\n\u003e   local result=\"\"\n\u003e   for title in \"${titles[@]}\"; do\n\u003e     local matches=$(printf '%s\\n' \"$all_wins\" | rg \"$title\")\n\u003e     result=\"$result\"$'\\n'\"$matches\"\n\u003e   done\n\u003e   echo \"$result\" | sed '/^\\s*$/d' # Remove empty lines\n\u003e }\n\u003e \n\u003e pip_wins=$(find_pip_windows \"${pip_titles[@]}\")\n\u003e target_mon=$(printf '%s\\n' \"$all_ws\" | rg \"^$ws\" | cut -d'|' -f2 | xargs)\n\u003e \n\u003e move_win() {\n\u003e   local win=\"$1\"\n\u003e \n\u003e   [[ -n $win ]] || return 0\n\u003e \n\u003e   local win_mon=$(echo \"$win\" | cut -d'|' -f4 | xargs)\n\u003e   local win_id=$(echo \"$win\" | cut -d'|' -f1 | xargs)\n\u003e   local win_app=$(echo \"$win\" | cut -d'|' -f2 | xargs)\n\u003e   local win_ws=$(echo \"$win\" | cut -d'|' -f5 | xargs)\n\u003e \n\u003e   # Skip if the monitor is already the target monitor or if the workspace matches\n\u003e   [[ $target_mon != \"$win_mon\" ]] \u0026\u0026 return 0\n\u003e   [[ $ws == \"$win_ws\" ]] \u0026\u0026 return 0\n\u003e \n\u003e   aerospace move-node-to-workspace --window-id \"$win_id\" \"$ws\"\n\u003e }\n\u003e \n\u003e # Process each PIP window found\n\u003e echo \"$pip_wins\" | while IFS= read -r win; do\n\u003e   move_win \"$win\"\n\u003e done\n\u003e ```\n\nI took this to ChatGPT, and apparently the issue is the `echo | while` loop construct, which pipes each iteration to a subshell, so the script's state isn't preserved across iterations. This can be easily fixed by replacing with a `for` loop:\n\n```\nfor win in $pip_wins; do\n  move_win \"$win\"\ndone\n```\n\nNow all PIP windows matching the titles in `pip_titles` will be moved on workspace focus change.","files":null}]}