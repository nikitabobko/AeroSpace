{"author":{"id":"1a893a966e4e8c6938d1f9823c7bffd1108446138b8fd801e9187e65b30f5095"},"ops":[{"type":3,"timestamp":1725553914,"nonce":"54wN0CwSH0QJ2qJ6c2/JaQrWZUI=","metadata":{"github-id":"IC_kwDOJl1IZM6LAjCP","github-url":"https://github.com/nikitabobko/AeroSpace/issues/296#issuecomment-2332176527"},"message":"\u003e I wanted to achieve a similar thing to what you are doing, but having what you call \"workspace T\" as a \"storage workspace\" to hide several apps (i.e., a scratchpad).\n\u003e \n\u003e I took the script by @hauang65 from #272 and modified it a bit:\n\u003e \n\u003e ```\n\u003e #!/usr/bin/env bash\n\u003e \n\u003e APP_ID=$1\n\u003e APP_NAME=$2\n\u003e \n\u003e focus_app() {\n\u003e   current_workspace=$(aerospace list-workspaces --focused)\n\u003e   app_window_id=$(aerospace list-windows --all --format \"%{window-id}%{right-padding} | %{app-name}\" | grep $APP_NAME | cut -d' ' -f1 | sed '1p;d')\n\u003e   aerospace focus --window-id $app_window_id\n\u003e   aerospace move-node-to-workspace $current_workspace\n\u003e   aerospace workspace $current_workspace\n\u003e   aerospace move-mouse window-lazy-center\n\u003e }\n\u003e \n\u003e app_closed() {\n\u003e   if [ \"$(aerospace list-windows --all --format '%{app-name}' | grep $APP_NAME)\" == \"\" ]; then\n\u003e     true\n\u003e   else\n\u003e     false\n\u003e   fi\n\u003e }\n\u003e \n\u003e app_focused() {\n\u003e   if [ \"$(aerospace list-windows --focused --format \"%{app-bundle-id}\")\" == \"$APP_ID\" ]; then\n\u003e     true\n\u003e   else\n\u003e     false\n\u003e   fi\n\u003e }\n\u003e \n\u003e unfocus_app() {\n\u003e   aerospace move-node-to-workspace scratchpad\n\u003e }\n\u003e \n\u003e if app_closed; then\n\u003e   open -a $APP_NAME\n\u003e   sleep 0.5\n\u003e else\n\u003e   if app_focused; then\n\u003e     unfocus_app\n\u003e   else\n\u003e     focus_app\n\u003e   fi\n\u003e fi\n\u003e ```\n\u003e \n\u003e Basically:\n\u003e \n\u003e * if the app is closed, open it (which will focus on the app by default).\n\u003e * if the app is open\n\u003e   \n\u003e   * if it is focused, unfocus it (i.e., send it to the scratchpad)\n\u003e   * if it is unfocused\n\u003e     \n\u003e     * save the current workspace (\"original workspace\") in a variable\n\u003e     * focus on the desired app\n\u003e     * move the (now focused) desired app to the \"original workspace\"\n\u003e     * switch to the \"original workspace\"\n\u003e     * focus the mouse on the app's window\n\u003e \n\u003e This script is binded to only one shortcut per app, and it receives as a parameter the app's bundle id and the app's name (although you could only have one of the two parameters, I found it useful when dealing with e.g. PWA from chrome, which share the app's name but do not share the bundle id).\n\u003e \n\u003e As an example keybind: `alt-shift-t = 'exec-and-forget /PATH/TO/SCRIPT/script.sh com.github.wez.wezterm WezTerm'`\n\u003e \n\u003e This isn't exactly what you asked for, though. In order to achieve what (I think that) you want, you would need to save your desired app's workspace (\"T\") on a file, as a variable wouldn't survive to two different executions of the script.\n\u003e \n\u003e There are some caveats (that I found so far, at least) to my modified script:\n\u003e \n\u003e * If you have two windows with the same bundle ID, it will grab the first one on the list.\n\u003e * I get some kind of \"race condition\" when using the AutoRaise app (which changes the app focus from mouse movements). If I accidentally move the mouse to a different application between the lines `aerospace focus --window-id $app_window_id` and `aerospace move-node-to-workspace $current_workspace`, the focused window will change, and this window will be sent instead to the original workspace, rather than the desired app's window. This could be solved by having a new \"move-window\" command for AeroSpace which moves a window based on some filter (such as app-id, window-id, app-bundle-id), as the first three lines of the \"if it is unfocused\" branch could be merged into only one command. I have to create the feature request for this, though :).\n\u003e \n\u003e Edit: I just saw that the feature I wanted to request at the end is actually covered by #186 :) .\n\nStellar work. I actually ended up moving over to yabai and giving up on aerospace. I found yabai to be much more customizable to my specific preferences. I have a really nice config working on yabai for my personal preferences.\n\nSome features:\n\u003e  * Terminal is fixed on workspace T, safari on workspace S, vscode on workspace V etc so on and so forth.\n\n\u003e * CTRL-T for example, searches through all workspaces to find windows of my terminal app and if it is found then that window is brought over to whichever workspace im working in. And pressing CTRL-T again sends the terminal window back to its designated workspace which is workspace T. \nThis is very useful as for example, if im working on a project on vscode, i can quickly bring over the terminal to the current space, it automatically focuses and when im done with it, i can send it back.\n\n\u003e * Another really useful feature I was able to implement was pressing, my keybind to go to any of my workspaces automatically checks for any open windows of the app thats specifically designated for that workspace and brings it over.\n\nso for example, if im working on a project in vscode, i bring over the terminal for a quick little command or whatever and I move over to my safari workspace without sending terminal back to workspace T, its a non issue, Because pressing cmd+T always checks if the terminal window is present in workspace T, if its not, it searches through all open workspaces and brings it over. \n\nThis allows for very little mental headroom on my part because i know that no matter what, cmd+T will ALWAYS bring up terminal, cmd+S will always bring up safari and cmd+V will always bring up vscode.\n\n\u003e * And the transition between workspaces is instant , and no windows ever stick up at the bottom right corner of the screen. Although I did have to disable SIP to achieve that.","files":null},{"type":6,"timestamp":1725553971,"nonce":"6gIRwxZpmM1evPxkrbZm1HViEWw=","metadata":{"github-id":"UCE_lALOJl1IZM6LAjCPzk79zRw"},"target":"b3069ed8dadb50405dd6e1c3e038e9ba4297db47c2d6f224d0eda494890df345","message":"\u003e I wanted to achieve a similar thing to what you are doing, but having what you call \"workspace T\" as a \"storage workspace\" to hide several apps (i.e., a scratchpad).\n\u003e \n\u003e I took the script by @hauang65 from #272 and modified it a bit:\n\u003e \n\u003e ```\n\u003e #!/usr/bin/env bash\n\u003e \n\u003e APP_ID=$1\n\u003e APP_NAME=$2\n\u003e \n\u003e focus_app() {\n\u003e   current_workspace=$(aerospace list-workspaces --focused)\n\u003e   app_window_id=$(aerospace list-windows --all --format \"%{window-id}%{right-padding} | %{app-name}\" | grep $APP_NAME | cut -d' ' -f1 | sed '1p;d')\n\u003e   aerospace focus --window-id $app_window_id\n\u003e   aerospace move-node-to-workspace $current_workspace\n\u003e   aerospace workspace $current_workspace\n\u003e   aerospace move-mouse window-lazy-center\n\u003e }\n\u003e \n\u003e app_closed() {\n\u003e   if [ \"$(aerospace list-windows --all --format '%{app-name}' | grep $APP_NAME)\" == \"\" ]; then\n\u003e     true\n\u003e   else\n\u003e     false\n\u003e   fi\n\u003e }\n\u003e \n\u003e app_focused() {\n\u003e   if [ \"$(aerospace list-windows --focused --format \"%{app-bundle-id}\")\" == \"$APP_ID\" ]; then\n\u003e     true\n\u003e   else\n\u003e     false\n\u003e   fi\n\u003e }\n\u003e \n\u003e unfocus_app() {\n\u003e   aerospace move-node-to-workspace scratchpad\n\u003e }\n\u003e \n\u003e if app_closed; then\n\u003e   open -a $APP_NAME\n\u003e   sleep 0.5\n\u003e else\n\u003e   if app_focused; then\n\u003e     unfocus_app\n\u003e   else\n\u003e     focus_app\n\u003e   fi\n\u003e fi\n\u003e ```\n\u003e \n\u003e Basically:\n\u003e \n\u003e * if the app is closed, open it (which will focus on the app by default).\n\u003e * if the app is open\n\u003e   \n\u003e   * if it is focused, unfocus it (i.e., send it to the scratchpad)\n\u003e   * if it is unfocused\n\u003e     \n\u003e     * save the current workspace (\"original workspace\") in a variable\n\u003e     * focus on the desired app\n\u003e     * move the (now focused) desired app to the \"original workspace\"\n\u003e     * switch to the \"original workspace\"\n\u003e     * focus the mouse on the app's window\n\u003e \n\u003e This script is binded to only one shortcut per app, and it receives as a parameter the app's bundle id and the app's name (although you could only have one of the two parameters, I found it useful when dealing with e.g. PWA from chrome, which share the app's name but do not share the bundle id).\n\u003e \n\u003e As an example keybind: `alt-shift-t = 'exec-and-forget /PATH/TO/SCRIPT/script.sh com.github.wez.wezterm WezTerm'`\n\u003e \n\u003e This isn't exactly what you asked for, though. In order to achieve what (I think that) you want, you would need to save your desired app's workspace (\"T\") on a file, as a variable wouldn't survive to two different executions of the script.\n\u003e \n\u003e There are some caveats (that I found so far, at least) to my modified script:\n\u003e \n\u003e * If you have two windows with the same bundle ID, it will grab the first one on the list.\n\u003e * I get some kind of \"race condition\" when using the AutoRaise app (which changes the app focus from mouse movements). If I accidentally move the mouse to a different application between the lines `aerospace focus --window-id $app_window_id` and `aerospace move-node-to-workspace $current_workspace`, the focused window will change, and this window will be sent instead to the original workspace, rather than the desired app's window. This could be solved by having a new \"move-window\" command for AeroSpace which moves a window based on some filter (such as app-id, window-id, app-bundle-id), as the first three lines of the \"if it is unfocused\" branch could be merged into only one command. I have to create the feature request for this, though :).\n\u003e \n\u003e Edit: I just saw that the feature I wanted to request at the end is actually covered by #186 :) .\n\nStellar work. I actually ended up moving over to yabai and giving up on aerospace. I found yabai to be much more customizable to my specific preferences. I have a really nice config working on yabai for my personal preferences.\n\nSome features:\n  * Terminal is fixed on workspace T, safari on workspace S, vscode on workspace V etc so on and so forth.\n\n * CTRL-T for example, searches through all workspaces to find windows of my terminal app and if it is found then that window is brought over to whichever workspace im working in. And pressing CTRL-T again sends the terminal window back to its designated workspace which is workspace T. \nThis is very useful as for example, if im working on a project on vscode, i can quickly bring over the terminal to the current space, it automatically focuses and when im done with it, i can send it back.\n\n * Another really useful feature I was able to implement was pressing, my keybind to go to any of my workspaces automatically checks for any open windows of the app thats specifically designated for that workspace and brings it over.\n\nso for example, if im working on a project in vscode, i bring over the terminal for a quick little command or whatever and I move over to my safari workspace without sending terminal back to workspace T, its a non issue, Because pressing cmd+T always checks if the terminal window is present in workspace T, if its not, it searches through all open workspaces and brings it over. \n\nThis allows for very little mental headroom on my part because i know that no matter what, cmd+T will ALWAYS bring up terminal, cmd+S will always bring up safari and cmd+V will always bring up vscode.\n\n * And the transition between workspaces is instant , and no windows ever stick up at the bottom right corner of the screen. Although I did have to disable SIP to achieve that.","files":null},{"type":6,"timestamp":1725554012,"nonce":"sVvPdnLPfKkaqnARYs1Qq3J0veU=","metadata":{"github-id":"UCE_lALOJl1IZM6LAjCPzk790Z4"},"target":"b3069ed8dadb50405dd6e1c3e038e9ba4297db47c2d6f224d0eda494890df345","message":"\u003e I wanted to achieve a similar thing to what you are doing, but having what you call \"workspace T\" as a \"storage workspace\" to hide several apps (i.e., a scratchpad).\n\u003e \n\u003e I took the script by @hauang65 from #272 and modified it a bit:\n\u003e \n\u003e ```\n\u003e #!/usr/bin/env bash\n\u003e \n\u003e APP_ID=$1\n\u003e APP_NAME=$2\n\u003e \n\u003e focus_app() {\n\u003e   current_workspace=$(aerospace list-workspaces --focused)\n\u003e   app_window_id=$(aerospace list-windows --all --format \"%{window-id}%{right-padding} | %{app-name}\" | grep $APP_NAME | cut -d' ' -f1 | sed '1p;d')\n\u003e   aerospace focus --window-id $app_window_id\n\u003e   aerospace move-node-to-workspace $current_workspace\n\u003e   aerospace workspace $current_workspace\n\u003e   aerospace move-mouse window-lazy-center\n\u003e }\n\u003e \n\u003e app_closed() {\n\u003e   if [ \"$(aerospace list-windows --all --format '%{app-name}' | grep $APP_NAME)\" == \"\" ]; then\n\u003e     true\n\u003e   else\n\u003e     false\n\u003e   fi\n\u003e }\n\u003e \n\u003e app_focused() {\n\u003e   if [ \"$(aerospace list-windows --focused --format \"%{app-bundle-id}\")\" == \"$APP_ID\" ]; then\n\u003e     true\n\u003e   else\n\u003e     false\n\u003e   fi\n\u003e }\n\u003e \n\u003e unfocus_app() {\n\u003e   aerospace move-node-to-workspace scratchpad\n\u003e }\n\u003e \n\u003e if app_closed; then\n\u003e   open -a $APP_NAME\n\u003e   sleep 0.5\n\u003e else\n\u003e   if app_focused; then\n\u003e     unfocus_app\n\u003e   else\n\u003e     focus_app\n\u003e   fi\n\u003e fi\n\u003e ```\n\u003e \n\u003e Basically:\n\u003e \n\u003e * if the app is closed, open it (which will focus on the app by default).\n\u003e * if the app is open\n\u003e   \n\u003e   * if it is focused, unfocus it (i.e., send it to the scratchpad)\n\u003e   * if it is unfocused\n\u003e     \n\u003e     * save the current workspace (\"original workspace\") in a variable\n\u003e     * focus on the desired app\n\u003e     * move the (now focused) desired app to the \"original workspace\"\n\u003e     * switch to the \"original workspace\"\n\u003e     * focus the mouse on the app's window\n\u003e \n\u003e This script is binded to only one shortcut per app, and it receives as a parameter the app's bundle id and the app's name (although you could only have one of the two parameters, I found it useful when dealing with e.g. PWA from chrome, which share the app's name but do not share the bundle id).\n\u003e \n\u003e As an example keybind: `alt-shift-t = 'exec-and-forget /PATH/TO/SCRIPT/script.sh com.github.wez.wezterm WezTerm'`\n\u003e \n\u003e This isn't exactly what you asked for, though. In order to achieve what (I think that) you want, you would need to save your desired app's workspace (\"T\") on a file, as a variable wouldn't survive to two different executions of the script.\n\u003e \n\u003e There are some caveats (that I found so far, at least) to my modified script:\n\u003e \n\u003e * If you have two windows with the same bundle ID, it will grab the first one on the list.\n\u003e * I get some kind of \"race condition\" when using the AutoRaise app (which changes the app focus from mouse movements). If I accidentally move the mouse to a different application between the lines `aerospace focus --window-id $app_window_id` and `aerospace move-node-to-workspace $current_workspace`, the focused window will change, and this window will be sent instead to the original workspace, rather than the desired app's window. This could be solved by having a new \"move-window\" command for AeroSpace which moves a window based on some filter (such as app-id, window-id, app-bundle-id), as the first three lines of the \"if it is unfocused\" branch could be merged into only one command. I have to create the feature request for this, though :).\n\u003e \n\u003e Edit: I just saw that the feature I wanted to request at the end is actually covered by #186 :) .\n\nStellar work. I actually ended up moving over to yabai and giving up on aerospace. I found yabai to be much more customizable to my specific preferences. I have a really nice config working on yabai for my personal preferences.\n\nSome features:\n  * Terminal is fixed on workspace T, safari on workspace S, vscode on workspace V etc so on and so forth.\n\n * CTRL-T for example, searches through all workspaces to find windows of my terminal app and if it is found then that window is brought over to whichever workspace im working in. And pressing CTRL-T again sends the terminal window back to its designated workspace which is workspace T. \nThis is very useful as for example, if im working on a project on vscode, i can quickly bring over the terminal to the current space, it automatically focuses and when im done with it, i can send it back.\n\n * Another really useful feature I was able to implement was pressing, my keybind to go to any of my workspaces automatically checks for any open windows of the app thats specifically designated for that workspace and brings it over.\n\nso for example, if im working on a project in vscode, i bring over the terminal for a quick little command or whatever and I move over to my safari workspace without sending terminal back to workspace T, its a non issue, Because pressing cmd+T always checks if the terminal window is present in workspace T, if its not, it searches through all open workspaces and brings it over. \n\nThis allows for very little mental headroom needed on my part because i know that no matter what, cmd+T will ALWAYS bring up terminal, cmd+S will always bring up safari and cmd+V will always bring up vscode.\n\n * And the transition between workspaces is instant , and no windows ever stick up at the bottom right corner of the screen. Although I did have to disable SIP to achieve that.","files":null}]}