{"author":{"id":"9006205d7e210990dd597a6791ceb19005a9c2879cb6e514c850aedc184b31c2"},"ops":[{"type":1,"timestamp":1725370840,"nonce":"yWg2mQ4N8RXWCI0caPmilF/n2OE=","metadata":{"github-id":"I_kwDOJl1IZM6VL38r","github-url":"https://github.com/nikitabobko/AeroSpace/issues/490","origin":"github"},"title":"[meta/dev] Consider using a code formatter (or swiftlint --fix --format)?","message":"I understand you've expressed in the past that you're not particularly interested in these kinds of tools, so no hard feelings if you want to ignore/close this issue. I just wanted to make the case from the perspective of someone eager to contribute to the project regularly.\n\n---\n\nWhen hacking on Aerospace, I think it would make it easier to maintain consistent code styling/quality with the use of some kind of formatter. Many people, myself included, use code formatters in their text editors/IDEs as part of their workflow to save time on manually addressing their styling to be consistent with the rest of a codebase.\n\nI know that swiftlint is used in this project to detect certain code smells and other unwanted patterns, but it can also be used to apply formatting based on XCode/Sourcekit formatting rules.\n\nHere's the excerpt from `swiftlint lint help`:\n```help\n--format                Should reformat the Swift files using the same mechanism used by\n                          Xcode (via SourceKit).\n                          Only applied with `--fix`/`--autocorrect`.\n```\n\nUnfortunately, Swiftlint doesn't allow for checking style violations, like it does lint rules. It can only apply the formatting when using `--fix` flag that fixes/formats the code in place. This not particularly useful for code quality checks in CI.\n\nHowever, The swift project provides the formatter used in Xcode/Sourcekit as [a standalone tool](https://github.com/swiftlang/swift-format). This is tool would provide the same default formatting as `swiftlint --fix --format`, with the advantage of being able to check the code without applying the fixes.\n\nThere's obviously a glaring caveat here - If you were to consider this option, initially formatting the codebase would mean ~179 files will change in the codebase (Based on me running a format on main). Understandably, this alone could be a reason to not want to introduce such a tool.\n\nFor what it's worth, the formatted code builds and runs as expected, so no obvious errors are introduced.\n\nThanks for considering.","files":null}]}