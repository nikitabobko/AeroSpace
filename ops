{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":3,"timestamp":1710536034,"nonce":"UUVW/TtGGVvaLoZXtwm74eaJB2c=","metadata":{"github-id":"IC_kwDOJl1IZM53PBYP","github-url":"https://github.com/nikitabobko/AeroSpace/issues/183#issuecomment-2000426511"},"message":"\u003e I agree that this case shouldn't fail, because it changes the way windows are being displayed. I think it should fail when executing move left in a case like this:\n\nIt shouldn't fail because there other valid workflows\n\n**Workflow 1.** Suppose that `enable-normalization-opposite-orientation-for-nested-containers` is enabled\nGiven\n```\nh_tiles\n  window 1 (focused)\n  window 2\n  window 3\n```\n\n`move left` will produce\n```\nh_tiles (implicitly created container)\n  window 1 (focused)\n  v_tiles (this h_tiles from the previous state. It just got normalized and changed its orientation)\n    window 2\n    window 3\n```\n\n**Workflow 2.** Even if `enable-normalization-opposite-orientation-for-nested-containers` is disabled, there are valid workflows\n\nGiven\n```\nh_tiles\n  window 1 (width=1/3, focused)\n  window 2 (width=1/3)\n  window 3 (width=1/3)\n```\n\n`move left` will produce\n```\nh_tiles\n  window 1 (width=1/2, focused)\n  h_tiles\n    window 2 (width=1/4)\n    window 3 (width=1/4)\n```\n\n---\n\nThe takeaway is that \"create implicit container\" cannot fail, it's always a successful operation.\n\nI understand what you are trying to achieve, you want to get the best of both worlds somehow. But I'd like to ask: isn't `aerospace move --move-boundaries all-monitors-outer-frame --boundaries-action create-implicit-container` already the best of both worlds? \n\nWhen there is another monitor in the move direction, we will move the window to that monitor. When there is no monitor in that direction, we will create an implicit container. \n\n---\n\nOne more alternative could be to create an implicit container only in the case when the user moves out the window in a \"perpendicular\" direction. But I can't suggest an elegant synopsis for it (suggestions are welcome!). It might be too much of a generalization, and users are better off writing scripts around the `aerospace tree` command #16 (the command that'd allow to inspect the tree)","files":null},{"type":6,"timestamp":1710536072,"nonce":"g4IJE7BSAga3gQYIDJ7SnjMB0+Y=","metadata":{"github-id":"UCE_lALOJl1IZM53PBYPzkIqQGk"},"target":"c6279277b6e743a6a68ca9806e57c05f3219eea212d0d13a48633ebdb480de40","message":"\u003e I agree that this case shouldn't fail, because it changes the way windows are being displayed. I think it should fail when executing move left in a case like this:\n\nIt shouldn't fail because there other valid workflows\n\n**Workflow 1.** Suppose that `enable-normalization-opposite-orientation-for-nested-containers` is enabled\nGiven\n```\nh_tiles\n  window 1 (focused)\n  window 2\n  window 3\n```\n\n`move left` will produce\n```\nh_tiles (implicitly created container)\n  window 1 (focused)\n  v_tiles (this h_tiles is from the previous state. It just got normalized and changed its orientation)\n    window 2\n    window 3\n```\n\n**Workflow 2.** Even if `enable-normalization-opposite-orientation-for-nested-containers` is disabled, there are valid workflows\n\nGiven\n```\nh_tiles\n  window 1 (width=1/3, focused)\n  window 2 (width=1/3)\n  window 3 (width=1/3)\n```\n\n`move left` will produce\n```\nh_tiles\n  window 1 (width=1/2, focused)\n  h_tiles\n    window 2 (width=1/4)\n    window 3 (width=1/4)\n```\n\n---\n\nThe takeaway is that \"create implicit container\" cannot fail, it's always a successful operation.\n\nI understand what you are trying to achieve, you want to get the best of both worlds somehow. But I'd like to ask: isn't `aerospace move --move-boundaries all-monitors-outer-frame --boundaries-action create-implicit-container` already the best of both worlds? \n\nWhen there is another monitor in the move direction, we will move the window to that monitor. When there is no monitor in that direction, we will create an implicit container. \n\n---\n\nOne more alternative could be to create an implicit container only in the case when the user moves out the window in a \"perpendicular\" direction. But I can't suggest an elegant synopsis for it (suggestions are welcome!). It might be too much of a generalization, and users are better off writing scripts around the `aerospace tree` command #16 (the command that'd allow to inspect the tree)","files":null}]}