{"author":{"id":"9006205d7e210990dd597a6791ceb19005a9c2879cb6e514c850aedc184b31c2"},"ops":[{"type":1,"timestamp":1723631241,"nonce":"5bbB/xHHog25y5IoLV2ftwj3oh8=","metadata":{"github-id":"I_kwDOJl1IZM6S8_fh","github-url":"https://github.com/nikitabobko/AeroSpace/issues/412","origin":"github"},"title":"[feature request] Ignore key binds for specific apps/windows","message":"Apologies if this has been requested before - I couldn't find anything similar.\n\nI would like to request a feature that allows us to ignore key binds if a specific app/window is focused and instead allow the keys to be sent to the application.\n\nMy use case is that I would like to integrate my `focus` keybinds with my terminal/multiplexer (Wezterm in this case). I was able to do this with yabai/skhd by leveraging Wezterms scriptable config. If it was focused, wezterm would handle the keypress and decide if it should navigate within its panes, based on the current panes siblings or if it should execute the yabai focus command.\n\nI have achieved something similar to this by executing a shell script on my focus keybinds and writing custom user vars to wezterm for it to handle. However this has introduced latency when switching focus even outside of wezterm. My setup for this is shared at the bottom if anyone else wants to achieve similar behaviour in the meantime.\n\n### Proposal\nTOML isn't the greatest format for dynamic config, so I wonder if this can wait until #278 is implemented. Maybe there could be a feature to propagate key presses under arbitrary conditions.\n\nOtherwise, I would draw inspiration from the callback syntax.\n```toml\n[[node.main.binding.conditional]]\nif.app-id.not = 'com.apple.systempreferences'\nalt-h = 'focus left'\n\n# etc.\n```\n\nI would be happy to have a go at implementing this if it's a feature that aligns with the projects goals. Thanks for considering.\n\n---\n### My config\n\nMy keybinds\n```toml\nalt-h = 'exec-and-forget /Users/jakenvac/.config/aerospace/focus.sh left'\nalt-j = 'exec-and-forget /Users/jakenvac/.config/aerospace/focus.sh down'\nalt-k = 'exec-and-forget /Users/jakenvac/.config/aerospace/focus.sh up'\nalt-l = 'exec-and-forget /Users/jakenvac/.config/aerospace/focus.sh right'\n```\nfocus.sh\n```sh\n#!/bin/bash\nDIR=$1\n\nwezpane=-1\nweztty=-1\n\nif aerospace list-windows --focused | grep -q \"WezTerm\"; then\n  wezpane=$(wezterm cli list-clients --format json | jq '.[0].focused_pane_id' 2\u003e/dev/null) || wezpane=-1\n  weztty=`wezterm cli list --format json | jq -r \".[] | select(.pane_id == $wezpane) | .tty_name\" 2\u003e/dev/null` || weztty=-1\nfi\n  \n# If wezterm is focused and we have its tty\nif [[ $wezpane != -1 ]] \u0026\u0026 [[ $weztty != -1 ]]; then\n  base64dir=$(printf \"%s\" \"$DIR\" | base64)\n  # this emits an event in wezterm that can be handled with lua scripts\n  wezcmd=`printf \"\\033]1337;SetUserVar=%s=%s\\007\" ActivatePaneFromAerospace $base64dir`\n  printf \"%s\" \"$wezcmd\" \u003e \"$weztty\";\nelse\n  aerospace focus $DIR\nfi\n```\nwezterm user-var-changed handler (this is a stripped down version, I also have it set up to manage navigating within neovim windows)\n```lua\nlocal aerospace_to_wezterm_map = {\n\tleft = \"Left\",\n\tdown = \"Down\",\n\tup = \"Up\",\n\tright = \"Right\",\n}\n\nlocal function CustomActivatePaneDirection(window, pane, direction)\n\tlocal wezterm_direction = aerospace_to_wezterm_map[direction]\n\n\tlocal tab = pane:tab()\n\tlocal sibling = tab:get_pane_direction(direction)\n\n\tif sibling ~= nil then\n\t\twindow:perform_action(act.ActivatePaneDirection(wezterm_direction), pane)\n\telse\n\t\twezterm.run_child_process({ \"/opt/homebrew/bin/aerospace\", \"focus\", direction })\n\tend\nend\n\nwezterm.on(\"user-var-changed\", function(window, pane, name, value)\n\tif name == \"ActivatePaneFromAerospace\" then\n\t\tCustomActivatePaneDirection(window, pane, value)\n\tend\nend)\n```","files":null}]}