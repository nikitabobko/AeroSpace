{"author":{"id":"9006205d7e210990dd597a6791ceb19005a9c2879cb6e514c850aedc184b31c2"},"ops":[{"type":3,"timestamp":1723642907,"nonce":"+JFeNjcLDtTrOt8D94O2asOC6D4=","metadata":{"github-id":"IC_kwDOJl1IZM6IbDy9","github-url":"https://github.com/nikitabobko/AeroSpace/issues/278#issuecomment-2288794813"},"message":"I think this sounds like it would be an incredible addition to the project.\n\nHave you thought about using existing embeddable scripting languages such as lua? I think this would be great for several reasons: (I'll use lua as an example here, but there other options)\n\n- Users can leverage existing tooling, such as:\n    - text editor syntax highlighting\n    - language server clients (With type def comments, in the case of lua lsp)\n    - package managers for plugins/extensibility\n- No need to maintain a custom language/interpreter/vm. \n    - A good example of this is neovim with lua vs vim with vimscript. The vim project spends a significant amount of time implementing and maintaining vimscript, whereas neovim is able to iterate quickly and use a tried and tested scripting language with its own maintainers and development cycle.\n- No need to embed scripts as strings in a toml file\n- Things like callbacks can use an event handler pattern:\n    ```lua\n    aerospace.on('window-detected', function(window) print(window.app_bundle_id) end)\n    ```\n\nThis of course would come with some cons, too:\n- You miss out on the fun of building your own language ðŸ˜„ \n- There doesn't seem to be any actively maintained swift bindings for lua specifically\n- Overhead. Using a general scripting language vs something lean and bespoke could increase build sizes and potentially impact performance. (Although luajit is *fast*)\n- It could be off putting to new users. Keeping a toml file that's easy to configure, with the option of extending by adding scripts as multiline strings is a good compromise to cater to newcomers and power users alike.","files":null},{"type":6,"timestamp":1723644350,"nonce":"9vU009HLHZuQTwWEcw+YtG1CMoM=","metadata":{"github-id":"UCE_lALOJl1IZM6IbDy9zk08cBQ"},"target":"62022a35685bc9ea805f1c06e3758f60b1128c47330bbd84b6d70f7ca9f4a133","message":"I think this sounds like it would be an incredible addition to the project.\n\nHave you thought about using existing embeddable scripting languages such as lua? I think this would be great for several reasons: (I'll use lua as an example here, but there other options)\n\n- Users can leverage existing tooling, such as:\n    - text editor syntax highlighting\n    - language server clients (With type def comments, in the case of lua lsp)\n    - package managers for plugins/extensibility\n- No need to maintain a custom language/interpreter/vm. \n    - A good example of this is neovim with lua vs vim with vimscript. The vim project spends a significant amount of time implementing and maintaining vimscript, whereas neovim is able to iterate quickly and use a tried and tested scripting language with its own maintainers and development cycle.\n- No need to embed scripts as strings in a toml file\n- Things like callbacks can use an event handler pattern:\n    ```lua\n    aerospace.on('window-detected', function(window) print(window.app_bundle_id) end)\n    ```\n\nThis of course would come with some cons, too:\n- You miss out on the fun of building your own language ðŸ˜„ \n- There doesn't seem to be any actively maintained swift bindings for lua specifically\n- Overhead. Using a general scripting language vs something lean and bespoke could increase build sizes and potentially impact performance. (Although luajit is *fast*)\n- It could be off putting to new users. Keeping a toml file that's easy to configure, with the option of extending by adding scripts as multiline strings is a good compromise to cater to newcomers and power users alike.\n\n---\n\nEdit: I've just found some incredibly well documented and up to date bindings for lua. Shocked it has so few stars. https://github.com/tomsci/LuaSwift","files":null},{"type":6,"timestamp":1723646689,"nonce":"Bx6zTgJaAcVgcTRaow8uLVaX7xg=","metadata":{"github-id":"UCE_lALOJl1IZM6IbDy9zk09eUQ"},"target":"62022a35685bc9ea805f1c06e3758f60b1128c47330bbd84b6d70f7ca9f4a133","message":"I think this sounds like it would be an incredible addition to the project.\n\nHave you thought about using existing embeddable scripting languages such as lua? I think this would be great for several reasons: (I'll use lua as an example here, but there other options)\n\n- Users can leverage existing tooling, such as:\n    - text editor syntax highlighting\n    - language server clients (With type def comments, in the case of lua lsp)\n    - package managers for plugins/extensibility\n- No need to maintain a custom language/interpreter/vm. \n    - A good example of this is neovim with lua vs vim with vimscript. The vim project spends a significant amount of time implementing and maintaining vimscript, whereas neovim is able to iterate quickly and use a tried and tested scripting language with its own maintainers and development cycle.\n- No need to embed scripts as strings in a toml file\n- Things like callbacks can use an event handler pattern:\n    ```lua\n    aerospace.on('window-detected', function(window) print(window.app_bundle_id) end)\n    ```\n\nThis of course would come with some cons, too:\n- You miss out on the fun of building your own language ðŸ˜„ \n- There doesn't seem to be any actively maintained swift bindings for lua specifically\n- Overhead. Using a general scripting language vs something lean and bespoke could increase build sizes and potentially impact performance. (Although luajit is *fast*)\n- It could be off putting to new users. Keeping a toml file that's easy to configure, with the option of extending by adding scripts as multiline strings is a good compromise to cater to newcomers and power users alike.\n\n---\n\nEdit: I've just found some incredibly well documented and up to date bindings for lua. Shocked it has so few stars. https://github.com/tomsci/LuaSwift\n\nEdit 2: I don't know how I didn't think of this at first, but macos provides a great embeddable language in the form of [JavaScriptCore](https://developer.apple.com/documentation/javascriptcore). Part of apples webkit. It requires no third party dependencies and has a very easy to use swift/obj-c api.\n\nHere's a very simple working code example, demonstrating just how easy it is to use.\n\n```swift\nimport Foundation\nimport JavaScriptCore\n\nlet context = JSContext()\n\nlet addTwoNumbers: @convention(block) (Int, Int) -\u003e Int = { num1, num2 in\n    print(\"Adding two numbers: \\(num1) + \\(num2)\")\n    return num1 + num2\n}\n\ncontext?.setObject(addTwoNumbers, forKeyedSubscript: \"addTwoNumbers\" as NSString)\n\nlet jsScript = \"addTwoNumbers(2, 3)\"\n\nif let result = context?.evaluateScript(jsScript) {\n    print(result.toString() ?? \"No result\")\n}\n```","files":null}]}