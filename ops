{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":3,"timestamp":1728428881,"nonce":"rVN+F26bHr8FQ0InoOFOa9+JUcI=","metadata":{"github-id":"IC_kwDOJl1IZM6PG92T","github-url":"https://github.com/nikitabobko/AeroSpace/issues/571#issuecomment-2400968083"},"message":"\u003e so would happily give up cmd tab to fix this.\n\nI don't want to introduce config options that make users choose between functionalities.\n\nBesides cmd-tab, other things will break:\n1. Focus other windows by clicking them with mouse\n2. Newly opened windows won't receive focus (especially bad for popups, that will disappear if you steal focus from them)\n\nI don't think that it's a good configuration option.\n\nAnticipating your suggestion to fix (2), that AeroSpace could itself focus newly opened windows. Some popups (like completion in IDE) don't expect to be focused when they appear #106 It's a wild west.\n\nFor these corner cases, AeroSpace has to listen to what macOS has to say about currently focused window, and once in a while AeroSpace just lightly and politely asks macOS to change focus when the appropriate commands are invoked by users. Unfortunately, AeroSpace is not the focus owner.\n\nThat being said, you can easily test how it would look like by running from sources with the following patch. The patch makes AeroSpace the \"sole focus owner\" without macOS being able to steal it from us.\n```diff\ndiff --git a/Sources/AppBundle/layout/refresh.swift b/Sources/AppBundle/layout/refresh.swift\nindex 48f5787e..d8ab51d9 100644\n--- a/Sources/AppBundle/layout/refresh.swift\n+++ b/Sources/AppBundle/layout/refresh.swift\n@@ -13,7 +13,6 @@ func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: ()\n \n     let nativeFocused = getNativeFocusedWindow(startup: startup)\n     if let nativeFocused { debugWindowsIfRecording(nativeFocused) }\n-    updateFocusCache(nativeFocused)\n     let focusBefore = focus.windowOrNil\n \n     refreshModel()\n@@ -27,9 +26,7 @@ func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: ()\n     }\n \n     if TrayMenuModel.shared.isEnabled {\n-        if forceFocus || focusBefore != focusAfter {\n-            focusAfter?.nativeFocus() // syncFocusToMacOs\n-        }\n+        focusAfter?.nativeFocus() // syncFocusToMacOs\n \n         updateTrayText()\n         normalizeLayoutReason(startup: startup)\n```","files":null},{"type":6,"timestamp":1728429658,"nonce":"bUXr96pGcGl5ymEDULPIp+AxFQo=","metadata":{"github-id":"UCE_lALOJl1IZM6PG92TzlHQhsw"},"target":"6e06eacbbc4f4889becde5e10dad066a62b6acd2832dfe648ed9670bcf5d5fc7","message":"\u003e so would happily give up cmd tab to fix this.\n\nI don't want to introduce config options that make users choose between suboptimal behaviors.\n\nBesides cmd-tab, other things will break:\n1. Focus other windows by clicking them with mouse\n2. Newly opened windows won't receive focus (especially bad for popups, that will disappear if you steal focus from them)\n\nI don't think that it's a good configuration option.\n\nAnticipating your suggestion to fix (2), that AeroSpace could itself focus newly opened windows. Some popups (like completion in IDE) don't expect to be focused when they appear #106 It's a wild west.\n\nFor these corner cases, AeroSpace has to listen to what macOS has to say about currently focused window, and once in a while AeroSpace just lightly and politely asks macOS to change focus when the appropriate commands are invoked by users. Unfortunately, AeroSpace is not the focus owner.\n\nThat being said, you can easily test how it would look like by running from sources with the following patch. The patch makes AeroSpace the \"sole focus owner\" without macOS being able to steal it from us.\n```diff\ndiff --git a/Sources/AppBundle/layout/refresh.swift b/Sources/AppBundle/layout/refresh.swift\nindex 48f5787e..d8ab51d9 100644\n--- a/Sources/AppBundle/layout/refresh.swift\n+++ b/Sources/AppBundle/layout/refresh.swift\n@@ -13,7 +13,6 @@ func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: ()\n \n     let nativeFocused = getNativeFocusedWindow(startup: startup)\n     if let nativeFocused { debugWindowsIfRecording(nativeFocused) }\n-    updateFocusCache(nativeFocused)\n     let focusBefore = focus.windowOrNil\n \n     refreshModel()\n@@ -27,9 +26,7 @@ func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: ()\n     }\n \n     if TrayMenuModel.shared.isEnabled {\n-        if forceFocus || focusBefore != focusAfter {\n-            focusAfter?.nativeFocus() // syncFocusToMacOs\n-        }\n+        focusAfter?.nativeFocus() // syncFocusToMacOs\n \n         updateTrayText()\n         normalizeLayoutReason(startup: startup)\n```","files":null},{"type":6,"timestamp":1728429665,"nonce":"zzb3UjovBZX19YtXGff+ZfsYf4M=","metadata":{"github-id":"UCE_lALOJl1IZM6PG92TzlHQh04"},"target":"6e06eacbbc4f4889becde5e10dad066a62b6acd2832dfe648ed9670bcf5d5fc7","message":"\u003e so would happily give up cmd tab to fix this.\n\nI don't want to introduce config options that make users choose between different suboptimal behaviors.\n\nBesides cmd-tab, other things will break:\n1. Focus other windows by clicking them with mouse\n2. Newly opened windows won't receive focus (especially bad for popups, that will disappear if you steal focus from them)\n\nI don't think that it's a good configuration option.\n\nAnticipating your suggestion to fix (2), that AeroSpace could itself focus newly opened windows. Some popups (like completion in IDE) don't expect to be focused when they appear #106 It's a wild west.\n\nFor these corner cases, AeroSpace has to listen to what macOS has to say about currently focused window, and once in a while AeroSpace just lightly and politely asks macOS to change focus when the appropriate commands are invoked by users. Unfortunately, AeroSpace is not the focus owner.\n\nThat being said, you can easily test how it would look like by running from sources with the following patch. The patch makes AeroSpace the \"sole focus owner\" without macOS being able to steal it from us.\n```diff\ndiff --git a/Sources/AppBundle/layout/refresh.swift b/Sources/AppBundle/layout/refresh.swift\nindex 48f5787e..d8ab51d9 100644\n--- a/Sources/AppBundle/layout/refresh.swift\n+++ b/Sources/AppBundle/layout/refresh.swift\n@@ -13,7 +13,6 @@ func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: ()\n \n     let nativeFocused = getNativeFocusedWindow(startup: startup)\n     if let nativeFocused { debugWindowsIfRecording(nativeFocused) }\n-    updateFocusCache(nativeFocused)\n     let focusBefore = focus.windowOrNil\n \n     refreshModel()\n@@ -27,9 +26,7 @@ func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: ()\n     }\n \n     if TrayMenuModel.shared.isEnabled {\n-        if forceFocus || focusBefore != focusAfter {\n-            focusAfter?.nativeFocus() // syncFocusToMacOs\n-        }\n+        focusAfter?.nativeFocus() // syncFocusToMacOs\n \n         updateTrayText()\n         normalizeLayoutReason(startup: startup)\n```","files":null},{"type":3,"timestamp":1728429502,"nonce":"eOBVxrvR0+oa2SiYr6nihse7yqw=","metadata":{"github-id":"IC_kwDOJl1IZM6PHAAS","github-url":"https://github.com/nikitabobko/AeroSpace/issues/571#issuecomment-2400976914"},"message":"\u003e if they are O(miliseconds) apart maybe have a check on whenever macos requests a focus check and wait to see if it was because a window closed instead?\n\nI can proudly say that, right now, AeroSpace doesn't use approximations like \"how many time passed between macOS events\", which makes AeroSpace reliable.\n\nBut yes, I thought about measuring time and ignoring `kAXFocusedWindowChangedNotification` when it's too close to `kAXUIElementDestroyedNotification` (which might require ignoring `kAXFocusedWindowChangedNotification` post factum, and there will be an unavoidable flickering)","files":null},{"type":6,"timestamp":1728429625,"nonce":"JzHPnmn8oZZRdEkHtQCZDWtNN8s=","metadata":{"github-id":"UCE_lALOJl1IZM6PHAASzlHQhLs"},"target":"5b3388359cd4d2e0c048807410ae40ad1674e31c5c1c6197f0d8d1b136947e92","message":"\u003e if they are O(miliseconds) apart maybe have a check on whenever macos requests a focus check and wait to see if it was because a window closed instead?\n\nI can proudly say that, right now, AeroSpace doesn't use approximations like \"how many time passed between macOS events\", which makes AeroSpace reliable.\n\nBut yes, I thought about measuring time and ignoring `kAXFocusedWindowChangedNotification` when it's too close to `kAXUIElementDestroyedNotification` (which might require ignoring `kAXFocusedWindowChangedNotification` post factum, and there will be an unavoidable flickering, but at least the right workspace/window would stay focused)","files":null}]}