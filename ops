{"author":{"id":"9006205d7e210990dd597a6791ceb19005a9c2879cb6e514c850aedc184b31c2"},"ops":[{"type":1,"timestamp":1723743253,"nonce":"EEl+C5KLmulExV6JBtKjJbs8kA4=","metadata":{"github-id":"I_kwDOJl1IZM6TI4ch","github-url":"https://github.com/nikitabobko/AeroSpace/issues/418","origin":"github"},"title":"Swift Package Manager can be used to build the entire app (including bridging header)","message":"Whilst looking around the codebase/learning how everything works in hopes of eventually contributing, I got the feeling that at some point an attempt was made to shift the project over to using Swift Package Manager over xcode. \n\nThere's this code (which is easily solvable, see below):\nhttps://github.com/nikitabobko/AeroSpace/blob/main/xcode-app-bundle-launcher/AeroSpaceApp.swift#L18-L24\n\n\u003cdetails\u003e\n\u003csummary\u003eAnd these commits\u003c/summary\u003e\n\n- 67a6021 Install swiftlint using SPM instead of brew\n- 9540b73 Cache SPM\n- c0a89dd Install xcodegen using SPM instead of brew\n- 43fe3d4 Fix tests after migration to SPM\n- 3a1fd31 Fix compilation after migration to SPM\n- 54f0aef Fix imports after migration to SPM\n- 5f02e54 Move tests from xcode to SPM\n- 086eba1 Migration to SPM: move src/* to LocalPackage/Sources/AppBundle/*\n- c63025c Preparation refactoring before migration to SPM\n\u003c/details\u003e\n\nI'm not sure if this is still useful, but I've put together a proof of concept showing that with a few tweaks, the entire project (Including the app bundle launcher) can be built with a single `swift build` command.\n\nHere's a diff of the changes I made in my branch: (you can clone this and run `swift build` it \"just works\")\nhttps://github.com/nikitabobko/AeroSpace/compare/main...jakenvac:AeroSpace:spm_demo\n\n## What I did\nThe main change was to replace the bridging header for the private accessibility API with a Swift Package Manager compatible module map. (It's basically the same thing)\n\n1. I created a new directory in `Sources` called `PrivateAPIBridge`, and in there a directory called `include`.  This directory contains two files:\n      - the `Bridged-Header.h` but renamed to `header.h` for easiness.\n      - a filed called `module.modulemap` which tells SPM how to present this header to swift:\n        ```\n        module PrivateAPIBridge {\n          header \"header.h\"\n          export *\n        }\n        ```\n2. I created a new build target in `Package.swift` and added it as a dependency of `AppBundle`:\n    ```\n        .target(\n            name: \"PrivateAPIBridge\",\n            path: \"Sources/PrivateAPIBridge\",\n            publicHeadersPath: \"include\"\n        ),\n    ```\n3. Now, anywhere in the `AppBundle` package, if we `import PrivateAPIBridge` we have access to `_AXUIElementGetWindow`. You can see in my branch, I did the bare minimum to use this, by simply immediately instanciating `BridgedHeaderImpl` in the `AppBundle` package instead of the launcher app.\n\n4. After this, It's simple enough to create another executable target in `Package.swift` using the code from the xcode-app-bundle-launcher to create an executable that will launch the app. Meaning it can be built and ran with `swift build`.\n\n## Caveats\nThere are a few things left to work out:\n- As SPM doesn't create an app bundle, but rather just the executable, bundling would need to be done via different means\n- This also means bundle introspection won't work without extra steps. I had to implement some small hacks to load a default config and prevent the calls to `infoDictionary` from crashing due to the missing bundle info\n\n## Benefits\nIf the last few caveats could be solved, I think this would make development much simpler. There is no need for lots of pre-build scripts and it entirely removes the dependency on xcode. And `swift build` is *fast*.\n\nI personally like to use neovim with sourcekit-lsp for swift development, so I am biased. Sourcekit-lsp isn't aware of any xcode project files/source locations so being able to rely only on SPM would be a huge boon.\n\nSorry for the rambling. I've not long finished work and am a bit fried. Hopefully this post makes some sense.","files":null}]}