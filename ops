{"author":{"id":"ffba96886ab5357ac767d9d86346f3ef51677cfa5e6e2b277322c9cdc59a516d"},"ops":[{"type":3,"timestamp":1720542331,"nonce":"C6Apfj47GuBG5CG2QkP/0pkkP58=","metadata":{"github-id":"IC_kwDOJl1IZM6ENhPb","github-url":"https://github.com/nikitabobko/AeroSpace/issues/320#issuecomment-2218136539"},"message":"As to the design problem, personally I think I'd like to see the server be started with the target config path, and then consider that in all following operations. i.e. if I run it with `-c /etc/aerospace.toml`, `reload-config` would reload at that location until the server is restarted with a different config location. \n\nAs for why, purely because I think it would follow most daemon design that start parameters don't change unless the daemon is restarted with new ones, but that's just my view :) \n\nAs for the `nix` use case, it'll maybe take a bit more explanation for why this would solve a problem I have. `nix-darwin` provides modules for configuring a MacOS system (users, system defaults, available packages in the environment, etc.), but the specifics are largely unimportant. Services bundled into `nix-darwin` modules that need launchd agents typically are installed along with a deterministic agent config based on the Nix store path of the app bundle or binary, and are pointed to a deterministic config again created in the Nix store.\n\nWithout getting into the weeds about Nix syntax and the module system, the intent is for a particular revision of a system config to create the same launch agents that reference the same target binary all the time - and `nix-darwin` manages those agents and their creation and lifecycle.\n\nFor a good example, take the `nix-darwin` module for yabai, [here](https://github.com/LnL7/nix-darwin/blob/master/modules/services/yabai/default.nix#L77-L88). This definition results in a config file being created in the Nix store, the yabai binary being available in the system `PATH`, and a launchd agent being created that calls the exact version of the target yabai binary in the store with the config generated in the store being passed in.\n\nIf you were to update the yabai package to a new version, for example, `nix-darwin` will ensure that the resultant launchd agent is unloaded, amended to point to the new correct binary, and then reloaded. Where this breaks when using AeroSpace is because it manages its own agent, if I update the app bundle available in my environment, as it stands I have to stop the AeroSpace service, delete the launch agent, and restart with the new app bundle to have the new agent created and pointing to the correct version of the bundle.\n\nI recognize that this is an oddly narrow use case, and probably not one you intended to support when designing AeroSpace in the first place, so I'll absolutely accept telling me to go kick rocks if it's an out of scope change :) That said, adjusting for out-of-band agent management would also support other configuration management tools that manage agent lifecycle that aren't necessarily Nix - and personally, I could absolutely see a use case for being able to point the binary to a config in order to validate it (though that would likely require the config validation that's done in `reload-config` to be split out into a separate command, for example I could see a lot of use of `aerospace validate-config -c \u003cconfig_file\u003e`).","files":null},{"type":6,"timestamp":1720542380,"nonce":"Ap7ok06j5KqeRg1qitSANjmVu7s=","metadata":{"github-id":"UCE_lALOJl1IZM6ENhPbzkprkJI"},"target":"9ac484c5fa95f361627bb39bc19a32d092d14ab41d34c805bb61ac89217b8bec","message":"As to the design problem, personally I think I'd like to see the server be started with the target config path, and then consider that in all following operations. i.e. if I run it with `-c /etc/aerospace.toml`, `reload-config` would reload at that location until the server is restarted with a different config location. \n\nAs for why, purely because I think it would follow most daemon design that start parameters don't change unless the daemon is restarted with new ones, but that's just my view :) \n\nAs for the `nix` use case, it'll maybe take a bit more explanation for why this would solve a problem I have. `nix-darwin` provides modules for configuring a MacOS system (users, system defaults, available packages in the environment, etc.), but the specifics are largely unimportant. Services bundled into `nix-darwin` modules that need launchd agents typically are installed along with a deterministic agent config based on the Nix store path of the app bundle or binary, and are pointed to a deterministic config again created in the Nix store.\n\nWithout getting into the weeds about Nix syntax and the module system, the intent is for a particular revision of a system config to create the same launch agents that reference the same target binary all the time - and `nix-darwin` manages those agents and their creation and lifecycle.\n\nFor a good example, take the `nix-darwin` module for yabai, [here](https://github.com/LnL7/nix-darwin/blob/master/modules/services/yabai/default.nix#L77-L88). This definition results in a config file being created in the Nix store, the yabai binary being available in the system `PATH`, and a launchd agent being created that calls the exact version of the target yabai binary in the store with the config generated in the store being passed in.\n\nIf you were to update the yabai package to a new version, for example, `nix-darwin` will ensure that the resultant launchd agent is unloaded, amended to point to the new correct binary, and then reloaded. Where this breaks when using AeroSpace is because it manages its own agent, if I update the app bundle available in my environment, as it stands I have to stop the AeroSpace service, delete the launch agent, and restart with the new app bundle to have the new agent created and pointing to the correct version of the bundle.\n\nI recognize that this is an oddly narrow use case, and probably not one you intended to support when designing AeroSpace in the first place, so I'll absolutely accept telling me to go kick rocks if it's an out of scope change :) That said, adjusting for out-of-band agent management would also support other configuration management tools that manage agent lifecycle that aren't necessarily Nix - and personally, I could absolutely see a use case for being able to point the binary to a config in order to validate it (though that would likely require the config validation that's done in `reload-config` to be split out into a separate command, for example I could see a lot of use of `aerospace validate-config -c \u003cconfig_file\u003e`).\n\nEDIT: And yes, I definitely did mean `--started-at-login`, sorry about that!","files":null}]}