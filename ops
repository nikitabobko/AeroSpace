{"author":{"id":"8004fe1f7ee47773144545bf91edada731edbe0b094ba7283d4082a596fe774c"},"ops":[{"type":3,"timestamp":1725357432,"nonce":"OlUkEDB7q++o2f6MKagfuPCMwxs=","metadata":{"github-id":"IC_kwDOJl1IZM6KpYVg","github-url":"https://github.com/nikitabobko/AeroSpace/issues/296#issuecomment-2326103392"},"message":"I wanted to achieve a similar thing to what you are doing, but having what you call \"workspace T\" as a \"storage workspace\" to hide several apps (i.e., a scratchpad).\n\nI took the script by @hauang65 from #272 and modified it a bit:\n\n```\n#!/usr/bin/env bash\n\nAPP_ID=$1\nAPP_NAME=$2\n\nfocus_app() {\n  current_workspace=$(aerospace list-workspaces --focused)\n  app_window_id=$(aerospace list-windows --all --format \"%{window-id}%{right-padding} | %{app-name}\" | grep $APP_NAME | cut -d' ' -f1 | sed '1p;d')\n  aerospace focus --window-id $app_window_id\n  aerospace move-node-to-workspace $current_workspace\n  aerospace workspace $current_workspace\n  aerospace move-mouse window-lazy-center\n}\n\napp_closed() {\n  if [ \"$(aerospace list-windows --all --format '%{app-name}' | grep $APP_NAME)\" == \"\" ]; then\n    true\n  else\n    false\n  fi\n}\n\napp_focused() {\n  if [ \"$(aerospace list-windows --focused --format \"%{app-bundle-id}\")\" == \"$APP_ID\" ]; then\n    true\n  else\n    false\n  fi\n}\n\nunfocus_app() {\n  aerospace move-node-to-workspace scratchpad\n}\n\nif app_closed; then\n  open -a $APP_NAME\n  sleep 0.5\nelse\n  if app_focused; then\n    unfocus_app\n  else\n    focus_app\n  fi\nfi\n```\n\nBasically:\n* if the app is closed, open it (which will focus on the app by default).\n* if the app is open\n  * if it is focused, unfocus it (i.e., send it to the scratchpad)\n  * if it is unfocused\n    * save the current workspace (\"original workspace\") in a variable\n    * focus on the desired app\n    * move the (now focused) desired app to the \"original workspace\"\n    * switch to the \"original workspace\"\n    * focus the mouse on the app's window\n\nThis script is binded to only one shortcut per app, and it receives as a parameter the app's bundle id and the app's name (although you could only have one of the two parameters, I found it useful when dealing with e.g. PWA from chrome, which share the app's name but do not share the bundle id).\n\nAs an example keybind:\n`\nalt-shift-t = 'exec-and-forget /PATH/TO/SCRIPT/script.sh com.github.wez.wezterm WezTerm'\n`\n\nThis isn't exactly what you asked for, though. In order to achieve what (I think that) you want, you would need to save your desired app's workspace (\"T\") on a file, as a variable wouldn't survive to two different executions of the script.\n\nThere are some caveats (that I found so far, at least) to my modified script:\n* If you have two windows with the same bundle ID, it will grab the first one on the list.\n* I get some kind of \"race condition\" when using the AutoRaise app (which changes the app focus from mouse movements). If I accidentally move the mouse to a different application between the lines `aerospace focus --window-id $app_window_id` and `aerospace move-node-to-workspace $current_workspace`, the focused window will change, and this window will be sent instead to the original workspace, rather than the desired app's window. This could be solved by having a new \"move-window\" command for AeroSpace which moves a window based on some filter (such as app-id, window-id, app-bundle-id), as the first three lines of the \"if it is unfocused\" branch could be merged into only one command. I have to create the feature request for this, though :).","files":null},{"type":6,"timestamp":1725358022,"nonce":"PvXmoJgBn/gKCDQgtiLcbp8nRQg=","metadata":{"github-id":"UCE_lALOJl1IZM6KpYVgzk66dPU"},"target":"56d664f91a67bfd1235005eda126ede1ed7b5407a2a0ad6a9049854783e7c1df","message":"I wanted to achieve a similar thing to what you are doing, but having what you call \"workspace T\" as a \"storage workspace\" to hide several apps (i.e., a scratchpad).\n\nI took the script by @hauang65 from #272 and modified it a bit:\n\n```\n#!/usr/bin/env bash\n\nAPP_ID=$1\nAPP_NAME=$2\n\nfocus_app() {\n  current_workspace=$(aerospace list-workspaces --focused)\n  app_window_id=$(aerospace list-windows --all --format \"%{window-id}%{right-padding} | %{app-name}\" | grep $APP_NAME | cut -d' ' -f1 | sed '1p;d')\n  aerospace focus --window-id $app_window_id\n  aerospace move-node-to-workspace $current_workspace\n  aerospace workspace $current_workspace\n  aerospace move-mouse window-lazy-center\n}\n\napp_closed() {\n  if [ \"$(aerospace list-windows --all --format '%{app-name}' | grep $APP_NAME)\" == \"\" ]; then\n    true\n  else\n    false\n  fi\n}\n\napp_focused() {\n  if [ \"$(aerospace list-windows --focused --format \"%{app-bundle-id}\")\" == \"$APP_ID\" ]; then\n    true\n  else\n    false\n  fi\n}\n\nunfocus_app() {\n  aerospace move-node-to-workspace scratchpad\n}\n\nif app_closed; then\n  open -a $APP_NAME\n  sleep 0.5\nelse\n  if app_focused; then\n    unfocus_app\n  else\n    focus_app\n  fi\nfi\n```\n\nBasically:\n* if the app is closed, open it (which will focus on the app by default).\n* if the app is open\n  * if it is focused, unfocus it (i.e., send it to the scratchpad)\n  * if it is unfocused\n    * save the current workspace (\"original workspace\") in a variable\n    * focus on the desired app\n    * move the (now focused) desired app to the \"original workspace\"\n    * switch to the \"original workspace\"\n    * focus the mouse on the app's window\n\nThis script is binded to only one shortcut per app, and it receives as a parameter the app's bundle id and the app's name (although you could only have one of the two parameters, I found it useful when dealing with e.g. PWA from chrome, which share the app's name but do not share the bundle id).\n\nAs an example keybind:\n`\nalt-shift-t = 'exec-and-forget /PATH/TO/SCRIPT/script.sh com.github.wez.wezterm WezTerm'\n`\n\nThis isn't exactly what you asked for, though. In order to achieve what (I think that) you want, you would need to save your desired app's workspace (\"T\") on a file, as a variable wouldn't survive to two different executions of the script.\n\nThere are some caveats (that I found so far, at least) to my modified script:\n* If you have two windows with the same bundle ID, it will grab the first one on the list.\n* I get some kind of \"race condition\" when using the AutoRaise app (which changes the app focus from mouse movements). If I accidentally move the mouse to a different application between the lines `aerospace focus --window-id $app_window_id` and `aerospace move-node-to-workspace $current_workspace`, the focused window will change, and this window will be sent instead to the original workspace, rather than the desired app's window. This could be solved by having a new \"move-window\" command for AeroSpace which moves a window based on some filter (such as app-id, window-id, app-bundle-id), as the first three lines of the \"if it is unfocused\" branch could be merged into only one command. I have to create the feature request for this, though :).\n\nEdit: I just saw that the feature I wanted to request at the end is actually covered by #186 :) .","files":null}]}