{"author":{"id":"2c8cb609a3bb484e7667729be44fffb982e7fdd08ea2e2f03546daf8556f5bbb"},"ops":[{"type":3,"timestamp":1728995306,"nonce":"0m4t/N+ZTZwBGao9b49cuAPyrwk=","metadata":{"github-id":"IC_kwDOJl1IZM6P31W1","github-url":"https://github.com/nikitabobko/AeroSpace/issues/250#issuecomment-2413778357"},"message":"Hey, I made a change to the regular expression - `[^...]` is for negative matches on individual characters. Frankly I don't see how this would ever have worked!\n\nYou might have been thinking of `(^Space|Little)`, but that wouldn't quite do it either, because the `^` character only signifies negation when it's the first character inside `[]`. So `(^Space|Little)` would be a positive match on `Space` at the start of the line OR a match on `Little` anywhere in the string. \n\nLuckily, Swift regular expressions include support for [negative lookahead assertions](https://github.com/swiftlang/swift-experimental-string-processing/blob/39cb22d96d90ee7cb308b1153e106e50598afdd9/Documentation/Evolution/RegexSyntaxRunTimeConstruction.md#lookahead-and-lookbehind). The snippet below works like a charm for me.\n\n(Also I removed `Little` from the pattern since I don't see that in my window titles either.)\n\n```\n[[on-window-detected]]\nif.app-id = 'company.thebrowser.Browser'\ncheck-further-callbacks = true\nrun = 'layout floating'\n\n[[on-window-detected]]\nif.app-id = 'company.thebrowser.Browser'\nif.window-title-regex-substring = '^(?!Space)'\ncheck-further-callbacks = true\nrun = 'layout tiling'\n```","files":null}]}