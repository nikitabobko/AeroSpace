{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":3,"timestamp":1730844907,"nonce":"SMyVsWJVcqsxOrKOnrbYaLEIDVo=","metadata":{"github-id":"IC_kwDOJl1IZM6Shezd","github-url":"https://github.com/nikitabobko/AeroSpace/issues/666#issuecomment-2458250461"},"message":"Thanks, I appreciate the well written and clear issue. You setup made laugh ðŸ˜‚ The situation reminds me of https://xkcd.com/1172/\n\nJokes aside, as you correctly pointed, you are a minority. One of the UX principles that I rely on is \"don't provide configuration option that makes users choose between trade-offs\". AeroSpace should work in the best possible way by default. That's why AeroSpace automatically chooses the most appropriate corner and doesn't ask users to configure corners manually.\n\nProviding a configuration option to choose between \"global hiding\" and \"local monitor hiding\" is choosing between trade-offs, which I won't do.\n\nOk, so what is the best possible way AeroSpace can automatically behave? I think the way it behaves right now is the best possible way, since it forces users to reconsider their monitor arrangement.\n\n\u003e Offtopic.\n\u003e Well, there is a room for improvement - AeroSpace should show a notification / yellow dot in the status bar asking users to change their monitor configuration rather than forcing to read the guide, but it's an improvement for future versions.\n\nAnticipating your next suggestion to use \"global\" approach when both corners are unavailable, IMO #149 is not an acceptable behavior. I still prefer to ask users to reconsider their monitor configuration, because the user will be happier in the long run.\n\nGiven the way AeroSpace implements workspaces, I think your monitor configuration is simply invalid, and I don't see a way to improve it.\n\nYour concrete proposal to provide configuration option to choose between \"global\" and \"local\" hiding strategies is rejected =\u003e I close the issue. You're free to make other concrete proposals if you think that there is a way to support monitor configurations as yours.","files":null},{"type":4,"timestamp":1730844907,"nonce":"Q9vwZezpdNLeGgcASk1M+k9DpWU=","metadata":{"github-id":"CE_lADOJl1IZM6dJBDqzwAAAAOFxUfU"},"status":2},{"type":3,"timestamp":1730845370,"nonce":"N8sfW+vnL2LyAC8sqNCcf1nAjL4=","metadata":{"github-id":"IC_kwDOJl1IZM6ShhOy","github-url":"https://github.com/nikitabobko/AeroSpace/issues/666#issuecomment-2458260402"},"message":"Having said that, you have a workaround to run from sources with the following patch to return old behavior:\n\n```diff\ndiff --git a/Sources/AppBundle/tree/MacWindow.swift b/Sources/AppBundle/tree/MacWindow.swift\nindex aaffca1c..f181ba55 100644\n--- a/Sources/AppBundle/tree/MacWindow.swift\n+++ b/Sources/AppBundle/tree/MacWindow.swift\n@@ -116,21 +116,7 @@ final class MacWindow: Window, CustomStringConvertible {\n             prevUnhiddenEmulationPositionRelativeToWorkspaceAssignedRect =\n                 topLeftCorner - workspace.workspaceMonitor.rect.topLeftCorner\n         }\n-        let p: CGPoint\n-        switch corner {\n-            case .bottomLeftCorner:\n-                guard let s = getSize() else { fallthrough }\n-                // Zoom will jump off if you do one pixel offset https://github.com/nikitabobko/AeroSpace/issues/527\n-                // todo this ad hoc won't be necessary once I implement optimization suggested by Zalim\n-                let onePixelOffset = macApp.isZoom ? .zero : CGPoint(x: 1, y: -1)\n-                p = nodeMonitor.visibleRect.bottomLeftCorner + onePixelOffset + CGPoint(x: -s.width, y: 0)\n-            case .bottomRightCorner:\n-                // Zoom will jump off if you do one pixel offset https://github.com/nikitabobko/AeroSpace/issues/527\n-                // todo this ad hoc won't be necessary once I implement optimization suggested by Zalim\n-                let onePixelOffset = macApp.isZoom ? .zero : CGPoint(x: 1, y: 1)\n-                p = nodeMonitor.visibleRect.bottomRightCorner - onePixelOffset\n-        }\n-        _ = setTopLeftCorner(p)\n+        _ = setTopLeftCorner(sortedMonitors.last!.rect.bottomRightCorner - CGPoint(x: 1, y: 1))\n     }\n \n     func unhideFromCorner() {\n```\n\nYes, it comes with the cost of supporting your own fork and dealing with merge conflicts.\n\nPlease follow https://github.com/nikitabobko/AeroSpace/blob/main/dev-docs/development.md for the project setup. And you can use `install-from-sources.sh` in the repo root to install `AeroSpace-SNAPSHOT` as `aerospace-dev` cask.","files":null},{"type":6,"timestamp":1730845418,"nonce":"zLwjkDwHQJxjQt+1BSL4I6nsFH4=","metadata":{"github-id":"UCE_lALOJl1IZM6ShhOyzlREe24"},"target":"5bad632ac5787d60f1281cbd0f32b8828130592e08971a38c475776040992355","message":"Having said that, if you really want to have what I consider \"unacceptable\" behavior, you have a workaround to run from sources with the following patch to return old behavior:\n\n```diff\ndiff --git a/Sources/AppBundle/tree/MacWindow.swift b/Sources/AppBundle/tree/MacWindow.swift\nindex aaffca1c..f181ba55 100644\n--- a/Sources/AppBundle/tree/MacWindow.swift\n+++ b/Sources/AppBundle/tree/MacWindow.swift\n@@ -116,21 +116,7 @@ final class MacWindow: Window, CustomStringConvertible {\n             prevUnhiddenEmulationPositionRelativeToWorkspaceAssignedRect =\n                 topLeftCorner - workspace.workspaceMonitor.rect.topLeftCorner\n         }\n-        let p: CGPoint\n-        switch corner {\n-            case .bottomLeftCorner:\n-                guard let s = getSize() else { fallthrough }\n-                // Zoom will jump off if you do one pixel offset https://github.com/nikitabobko/AeroSpace/issues/527\n-                // todo this ad hoc won't be necessary once I implement optimization suggested by Zalim\n-                let onePixelOffset = macApp.isZoom ? .zero : CGPoint(x: 1, y: -1)\n-                p = nodeMonitor.visibleRect.bottomLeftCorner + onePixelOffset + CGPoint(x: -s.width, y: 0)\n-            case .bottomRightCorner:\n-                // Zoom will jump off if you do one pixel offset https://github.com/nikitabobko/AeroSpace/issues/527\n-                // todo this ad hoc won't be necessary once I implement optimization suggested by Zalim\n-                let onePixelOffset = macApp.isZoom ? .zero : CGPoint(x: 1, y: 1)\n-                p = nodeMonitor.visibleRect.bottomRightCorner - onePixelOffset\n-        }\n-        _ = setTopLeftCorner(p)\n+        _ = setTopLeftCorner(sortedMonitors.last!.rect.bottomRightCorner - CGPoint(x: 1, y: 1))\n     }\n \n     func unhideFromCorner() {\n```\n\nYes, it comes with the cost of supporting your own fork and dealing with merge conflicts.\n\nPlease follow https://github.com/nikitabobko/AeroSpace/blob/main/dev-docs/development.md for the project setup. And you can use `install-from-sources.sh` in the repo root to install `AeroSpace-SNAPSHOT` as `aerospace-dev` cask.","files":null}]}