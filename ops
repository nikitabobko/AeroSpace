{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":6,"timestamp":1741194207,"nonce":"TEidEPWLpLFkFjGIp0FT34W57Hw=","metadata":{"github-id":"UCE_lAHOJl1IZM57ZB5XznOZpU0"},"target":"3c6831d8b16d45e914c66e5a6d008d391d6b3de3768d60cdd1b193226777ec18","message":"Hi,\n\nIt's possible to have a command that runs all the `on-window-detected` callbacks?\n\nUse-case:\nI have the apps \u003c\u003e workspaces affinities setup like:\n\n```\n# apps to workspaces\n[[on-window-detected]]\nif.app-id = 'com.microsoft.VSCode'\nrun = ['move-node-to-workspace 1']\n\n[[on-window-detected]]\nif.app-id = 'com.vivaldi.Vivaldi'\nrun = ['move-node-to-workspace 2']\n\n...\n```\n\nSometimes I move apps between workspaces and then have the need to reposition them back to the initial workspaces. So it would be useful to have a command like `aerospace force-window-detected` to run all the rules the move the windows back to their original workspace.\n\n~~Also a different request/question, it's possible to assign layouts to workspaces in the config file? e.g `workspace 1` to start with the `h_accordion` layout.~~ (UPD: resolved in the comments)","files":null},{"type":3,"timestamp":1704714123,"nonce":"9YSZbVrbSyWFlGoMLm5LgL6YBGc=","metadata":{"github-id":"IC_kwDOJl1IZM5wG2Ja","github-url":"https://github.com/nikitabobko/AeroSpace/issues/107#issuecomment-1880842842"},"message":"\u003e So it would be useful to have a command like aerospace force-window-detected to run all the rules the move the windows back to their original workspace.\n\nNice. I like the suggestion. The hardest part here is to come up with a good name for the command\n\nBrainstorming:\n1. `force-window-detected` (the suggested name)\n2. `run-on-window-detected-callbacks` \n3. `force-run-on-window-detected-callbacks`\n4. `redetect-windows`\n\nRight now, 2 and 3 are my favorite. IMO, they are the most clear. Ideas are welcome\n\n\u003e Also a different request/question, it's possible to assign layouts to workspaces in the config file? e.g workspace 1 to start with the h_accordion layout.\n\nRight now. it's not possible, but probably it'd be nice to have. What is your use case? \n\nI'm curious if it were possible to run `layout` command in `on-window-detected` callback, would it resolve your issue? (this way you will apply the layout only if the specific window is detected, but maybe it's exactly what you want to, I don't know your use cases)\n\nThe hardest part is to come up with a good syntax\n\nBrainstorming:\n**(1)**\n```toml\ndefault-root-container-layout = 'tiles'\nworkspace.1.default-root-container-layout = 'tiles'\n```\n**(2)**\n```toml\n[default-root-container-layout]\nworkspace.1 = 'tiles'\nworkspace.2 = 'accordion'\nworkspace.all = 'tiles' # 'all' will be a reserved name for workspaces since 0.8.0, anyway\n```\n**(3)**\n```toml\n[default-root-container-layout]\nworkspace.1 = 'tiles'\nworkspace.2 = 'accordion'\nother = 'tiles'\n```","files":null},{"type":6,"timestamp":1704714171,"nonce":"MtLniwWEMrCA96XJc3oYyKVKJtk=","metadata":{"github-id":"UCE_lALOJl1IZM5wG2Jazj2tGqU"},"target":"c63923e96f8321867041e85468eac84cc389afe1bb1a764e52ae29339987e574","message":"\u003e So it would be useful to have a command like aerospace force-window-detected to run all the rules the move the windows back to their original workspace.\n\nNice. I like the suggestion. The hardest part here is to come up with a good name for the command\n\nBrainstorming:\n1. `force-window-detected` (the suggested name)\n2. `run-on-window-detected-callbacks` \n3. `force-run-on-window-detected-callbacks`\n4. `redetect-windows`\n\nRight now, 2 and 3 are my favorite. IMO, they are the most clear. Ideas are welcome\n\n\u003e Also a different request/question, it's possible to assign layouts to workspaces in the config file? e.g workspace 1 to start with the h_accordion layout.\n\nRight now. it's not possible, but probably it'd be nice to have. What is your use case? \n\nI'm curious if it were possible to run `layout` command in `on-window-detected` callback, would it resolve your issue? (this way you will apply the layout only if the specific window is detected, but maybe it's exactly what you want to, I don't know your use cases)\n\nThe hardest part is to come up with a good syntax\n\nBrainstorming:\n**(a)**\n```toml\ndefault-root-container-layout = 'tiles'\nworkspace.1.default-root-container-layout = 'tiles'\n```\n**(b)**\n```toml\n[default-root-container-layout]\nworkspace.1 = 'tiles'\nworkspace.2 = 'accordion'\nworkspace.all = 'tiles' # 'all' will be a reserved name for workspaces since 0.8.0, anyway\n```\n**(c)**\n```toml\n[default-root-container-layout]\nworkspace.1 = 'tiles'\nworkspace.2 = 'accordion'\nother = 'tiles'\n```","files":null},{"type":6,"timestamp":1704714231,"nonce":"HKLmEXMogNxLxGHjotfM0GArIzY=","metadata":{"github-id":"UCE_lALOJl1IZM5wG2Jazj2tHao"},"target":"c63923e96f8321867041e85468eac84cc389afe1bb1a764e52ae29339987e574","message":"\u003e So it would be useful to have a command like aerospace force-window-detected to run all the rules the move the windows back to their original workspace.\n\nNice. I like the suggestion. The hardest part here is to come up with a good name for the command\n\nBrainstorming:\n1. `force-window-detected` (the suggested name)\n2. `run-on-window-detected-callbacks` \n3. `force-run-on-window-detected-callbacks`\n4. `redetect-windows`\n\nRight now, 2 and 3 are my favorite. IMO, they are the most clear. Ideas are welcome\n\n\u003e Also a different request/question, it's possible to assign layouts to workspaces in the config file? e.g workspace 1 to start with the h_accordion layout.\n\nRight now. it's not possible, but probably it'd be nice to have. What is your use case? \n\nI'm curious if it were possible to run `layout` command in `on-window-detected` callback, would it resolve your issue? (this way you will apply the layout only if the specific window is detected, but maybe it's exactly what you want to, I don't know your use cases)\n\nThe hardest part is to come up with a good syntax\n\nBrainstorming:\n```toml\n# (a)\ndefault-root-container-layout = 'tiles'\nworkspace.1.default-root-container-layout = 'tiles'\n\n# (b)\n[default-root-container-layout]\nworkspace.1 = 'tiles'\nworkspace.2 = 'accordion'\nworkspace.all = 'tiles' # 'all' will be a reserved name for workspaces since 0.8.0, anyway\n\n# (c)\n[default-root-container-layout]\nworkspace.1 = 'tiles'\nworkspace.2 = 'accordion'\nother = 'tiles'\n```","files":null}]}