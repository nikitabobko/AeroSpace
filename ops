{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":1,"timestamp":1718466751,"nonce":"45SnARyFiV3ip1Om0t9aOuIxh0Q=","metadata":{"github-id":"I_kwDOJl1IZM6MXe53","github-url":"https://github.com/nikitabobko/AeroSpace/issues/278","origin":"github"},"title":"Feature: shell-like combinators for conditional computation and sending several commands to server in a single batch","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nBut the problem that it's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      (test %{app-bundle-id} == intellij || test %{app-bundle-id} == intellij.community) \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command will allow to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther commands that AeroSpace has to support to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues will be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null}]}