{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":1,"timestamp":1736625764,"nonce":"TNwAomLfG+VXPvk72xtETaqDmUc=","metadata":{"github-id":"I_kwDOJl1IZM6l09ml","github-url":"https://github.com/nikitabobko/AeroSpace/issues/962","origin":"github"},"title":"Feat: automatically-quit-apps-with-zero-windows","message":"Draft:\n\n```diff\ndiff --git a/Sources/AppBundle/config/Config.swift b/Sources/AppBundle/config/Config.swift\nindex 2c0aad91..19009368 100644\n--- a/Sources/AppBundle/config/Config.swift\n+++ b/Sources/AppBundle/config/Config.swift\n@@ -40,6 +40,7 @@ struct Config: Copyable {\n     var defaultRootContainerOrientation: DefaultContainerOrientation = .auto\n     var startAtLogin: Bool = false\n     var automaticallyUnhideMacosHiddenApps: Bool = false\n+    var automaticallyQuitAppsWithZeroWindows: AutomaticallyQuitAppsWithZeroWindows = .off\n     var accordionPadding: Int = 30\n     var enableNormalizationOppositeOrientationForNestedContainers: Bool = true\n     var execOnWorkspaceChange: [String] = [] // todo deprecate\n@@ -58,6 +59,12 @@ struct Config: Copyable {\n     var preservedWorkspaceNames: [String] = []\n }\n\n+enum AutomaticallyQuitAppsWithZeroWindows: String, CaseIterable {\n+    case off\n+    case all\n+    case allExceptFinder = \"all-except-finder\"\n+}\n+\n enum DefaultContainerOrientation: String {\n     case horizontal, vertical, auto\n }\ndiff --git a/Sources/AppBundle/config/parseConfig.swift b/Sources/AppBundle/config/parseConfig.swift\nindex bca2b5d6..bd9bef95 100644\n--- a/Sources/AppBundle/config/parseConfig.swift\n+++ b/Sources/AppBundle/config/parseConfig.swift\n@@ -102,6 +102,7 @@ private let configParser: [String: any ParserProtocol\u003cConfig\u003e] = [\n\n     \"start-at-login\": Parser(\\.startAtLogin, parseBool),\n     \"automatically-unhide-macos-hidden-apps\": Parser(\\.automaticallyUnhideMacosHiddenApps, parseBool),\n+    \"automatically-quit-apps-with-zero-windows\": Parser(\\.automaticallyQuitAppsWithZeroWindows, parseAutomaticallyQuitApps),\n     \"accordion-padding\": Parser(\\.accordionPadding, parseInt),\n     \"exec-on-workspace-change\": Parser(\\.execOnWorkspaceChange, parseExecOnWorkspaceChange),\n     \"exec\": Parser(\\.execConfig, parseExecConfig),\n@@ -275,6 +276,11 @@ private func parseLayout(_ raw: TOMLValueConvertible, _ backtrace: TomlBacktrace\n         .flatMap { $0.parseLayout().orFailure(.semantic(backtrace, \"Can't parse layout '\\($0)'\")) }\n }\n\n+private func parseAutomaticallyQuitApps(_ raw: TOMLValueConvertible, _ backtrace: TomlBacktrace) -\u003e ParsedToml\u003cAutomaticallyQuitAppsWithZeroWindows\u003e {\n+    parseString(raw, backtrace)\n+        .flatMap { parseEnum($0, AutomaticallyQuitAppsWithZeroWindows.self).toParsedToml(backtrace) }\n+}\n+\n private func skipParsing\u003cT\u003e(_ value: T) -\u003e (_ raw: TOMLValueConvertible, _ backtrace: TomlBacktrace) -\u003e ParsedToml\u003cT\u003e {\n     { _, _ in .success(value) }\n }\ndiff --git a/Sources/AppBundle/layout/refresh.swift b/Sources/AppBundle/layout/refresh.swift\nindex 141e50b7..ca5bc5ed 100644\n--- a/Sources/AppBundle/layout/refresh.swift\n+++ b/Sources/AppBundle/layout/refresh.swift\n@@ -35,10 +35,28 @@ func refreshSession\u003cT\u003e(screenIsDefinitelyUnlocked: Bool, startup: Bool = false,\n         updateTrayText()\n         normalizeLayoutReason(startup: startup)\n         layoutWorkspaces()\n+\n+        if config.automaticallyQuitAppsWithZeroWindows != .off { quitAppsWithZeroWindows() }\n     }\n     return result\n }\n\n+func quitAppsWithZeroWindows() {\n+    let exceptFinder = config.automaticallyQuitAppsWithZeroWindows == .allExceptFinder\n+    let appsWithWindows = MacWindow.allWindowsMap.map { $0.value.app.pid }.toSet()\n+    let frontmostApp = NSWorkspace.shared.frontmostApplication\n+    let menuBarApp = NSWorkspace.shared.menuBarOwningApplication\n+    for (pid, app) in MacApp.allAppsMap {\n+        if pid == frontmostApp?.processIdentifier || pid == menuBarApp?.processIdentifier || appsWithWindows.contains(pid) {\n+            continue\n+        }\n+        if exceptFinder \u0026\u0026 app.nsApp.bundleIdentifier == finderAppBundleId {\n+            continue\n+        }\n+        app.nsApp.terminate()\n+    }\n+}\n+\n func refreshAndLayout(screenIsDefinitelyUnlocked: Bool, startup: Bool = false) {\n     refreshSession(screenIsDefinitelyUnlocked: screenIsDefinitelyUnlocked, startup: startup, body: {})\n }\ndiff --git a/Sources/AppBundle/util/appBundleUtil.swift b/Sources/AppBundle/util/appBundleUtil.swift\nindex 5802a18f..84b35fca 100644\n--- a/Sources/AppBundle/util/appBundleUtil.swift\n+++ b/Sources/AppBundle/util/appBundleUtil.swift\n@@ -2,7 +2,8 @@ import AppKit\n import Common\n import Foundation\n\n-let lockScreenAppBundleId = \"com.apple.loginwindow\"\n+let lockScreenAppBundleId = \"com.apple.loginwindow\" // /System/Library/CoreServices/[loginwindow.app](http://loginwindow.app/)\n+let finderAppBundleId = \"com.apple.finder\" // /System/Library/CoreServices/Finder.app\n let AEROSPACE_WINDOW_ID = \"AEROSPACE_WINDOW_ID\" // env var\n let AEROSPACE_WORKSPACE = \"AEROSPACE_WORKSPACE\" // env var\n\ndiff --git a/docs/config-examples/default-config.toml b/docs/config-examples/default-config.toml\nindex 705a4e9c..9147796c 100644\n--- a/docs/config-examples/default-config.toml\n+++ b/docs/config-examples/default-config.toml\n@@ -43,6 +43,10 @@ on-focused-monitor-changed = ['move-mouse monitor-lazy-center']\n # Also see: https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app\n automatically-unhide-macos-hidden-apps = false\n\n+# Quit apps when they have zero windows and when they are unfocused.\n+# Possible values: off|all-except-finder|all\n+automatically-quit-apps-with-zero-windows = 'off'\n+\n # Possible values: (qwerty|dvorak)\n # See https://nikitabobko.github.io/AeroSpace/guide#key-mapping\n [key-mapping]\n```","files":null}]}