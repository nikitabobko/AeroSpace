{"author":{"id":"88ebbc1c8bb78d9b6988746aea94009064340af1977165298eef55ce76edc1ed"},"ops":[{"type":3,"timestamp":1730819207,"nonce":"+xTV/70nvSGX7p2voq7bhzprR4U=","metadata":{"github-id":"IC_kwDOJl1IZM6SeUOM","github-url":"https://github.com/nikitabobko/AeroSpace/issues/562#issuecomment-2457420684"},"message":"\u003e @nikitabobko Couldn't aerospace create a placeholder window for the fullscreened app with the same exact dimensions which would hold its place in the tree and could be replaced by the original window when the fullscreen is left? I know we would be quite close to the phantom holes you describe but we could write like \"App in Fullscreen\" on the placeholder window and move to the fullscreen \"space\" when it is clicked. Since I don't know the codebase of aerospace I don't know how feasible this is or if it just sounds stupid. And even if it's doable I see that it's a bit wonky but implementing this would greatly reduce the annoyance with fullscreens.\n\nWhy would you want a placeholder window with the original dimensions ? It seems to me that ignoring the window (ie: 0px dimension and no interaction) with a kind of \"fullscreen\" flag would make more sense. Also, I think drawing graphics (for the placeholder window) is currently out of the scope of the project, as all it does is interact with the preexisting window system.\n\n\u003e As of your overall request - a particular proposal of the algorithm should be made on how to attach windows back to the tree where they were. I already briefly described the essence of the problem here [#188 (comment)](https://github.com/nikitabobko/AeroSpace/issues/188#issuecomment-2015684656)\n\nHow about just not detaching it ? The \"phantom window\" problem could be easily resolved with the use of a flag to ignore its size. As for the behaviour regarding tree modifications, I think disabling all user-triggered actions (move, focus, etc.) but keeping automatic transformations (flatten, etc.) active could do the trick.\n\nIf the tree structure is unmodified, the window comes back exactly where it was, and if the structure has changed, then it lands where it would have gone with the modifications that were applied.\n\nMaybe there would be a few edge-cases to cover, but this approach seems sound to me. Am I missing something ?","files":null},{"type":6,"timestamp":1730819248,"nonce":"eCQSh+xixLa1depLLku/ucR4a0M=","metadata":{"github-id":"UCE_lALOJl1IZM6SeUOMzlQ48RE"},"target":"745f0fcb042c9e4877aad80ba5f2e9dc0ea4f17bffe301950e409095c1365f09","message":"\u003e @nikitabobko Couldn't aerospace create a placeholder window for the fullscreened app with the same exact dimensions which would hold its place in the tree and could be replaced by the original window when the fullscreen is left? I know we would be quite close to the phantom holes you describe but we could write like \"App in Fullscreen\" on the placeholder window and move to the fullscreen \"space\" when it is clicked. Since I don't know the codebase of aerospace I don't know how feasible this is or if it just sounds stupid. And even if it's doable I see that it's a bit wonky but implementing this would greatly reduce the annoyance with fullscreens.\n\nWhy would you want a placeholder window with the original dimensions ? It seems to me that ignoring the window (ie: 0px dimension and no interaction) with a kind of \"fullscreen\" flag would make more sense. Also, I think drawing graphics (for the placeholder window) is currently out of the scope of the project, as all it does right now is interact with the preexisting window system, but it does not create any windows or graphics.\n\n\u003e As of your overall request - a particular proposal of the algorithm should be made on how to attach windows back to the tree where they were. I already briefly described the essence of the problem here [#188 (comment)](https://github.com/nikitabobko/AeroSpace/issues/188#issuecomment-2015684656)\n\nHow about just not detaching it ? The \"phantom window\" problem could be easily resolved with the use of a flag to ignore its size. As for the behaviour regarding tree modifications, I think disabling all user-triggered actions (move, focus, etc.) but keeping automatic transformations (flatten, etc.) active could do the trick.\n\nIf the tree structure is unmodified, the window comes back exactly where it was, and if the structure has changed, then it lands where it would have gone with the modifications that were applied.\n\nMaybe there would be a few edge-cases to cover, but this approach seems sound to me. Am I missing something ?","files":null}]}