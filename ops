{"author":{"id":"dd4e7f4dcbd67a1d1e444d4e4389b6ba55d4aec2fffc146ad9b04aade5354482"},"ops":[{"type":3,"timestamp":1735752231,"nonce":"cNUmVZqnlyywX5kTmyAf2B97GUg=","metadata":{"github-id":"IC_kwDOJl1IZM6ZAp6C","github-url":"https://github.com/nikitabobko/AeroSpace/issues/101#issuecomment-2567085698"},"message":"I've compiled some information for how amethyst/yabai/hammerspoon solves this issue:\n[amethyst code](https://github.com/ianyh/Amethyst/pull/1530/files) (from @alimg)\n[yabai code](https://github.com/koekeishiya/yabai/blob/f4ada8d557aeb9c8ba0d031ee6f645acffff50fd/src/window_manager.c#L1281-L1323)\nhttps://github.com/Hammerspoon/hammerspoon/issues/370 (probably the most informative)\n\nIt looks like the creator of yabai (and later amethyst) solved it by using private APIs described [here](https://github.com/Hammerspoon/hammerspoon/issues/370#issuecomment-545545468). However, another user mentions they were able to activate the application, then focus the window after 0.001 seconds, and have this functionality work reliably, [found here](https://github.com/Hammerspoon/hammerspoon/issues/370#issuecomment-615535897).\n\nI think it's worth adding the delay for now so that the \"displays have separate spaces\" setting doesn't need to be disabled, but overall it seems like the private API will give the most robust functionality. Perhaps aerospace should introduce settings to toggle the use of private APIs such as this?\n\n---\n\nI tried testing the non-private API theory by activating the app, delaying for 1s, then raising the window, but it seems hammerspoon does a bit more [magic under the hood](https://github.com/Hammerspoon/hammerspoon/blob/931d38acbd7988dc2ec87a9c095bc50bd83ca584/extensions/window/window.lua#L507-L537) to focus a window:\n\n```lua\nfunction objectMT.focus(self)\n  local app=self:application()\n  if app then\n    self:becomeMain()\n    app:_bringtofront()\n    if app:bundleID()=='com.apple.finder' then --workaround for the desktop taking over\n      -- it may look like this should ideally go inside :becomeMain(), but the problem is actually\n      -- triggered by :_bringtofront(), so the workaround belongs here\n      if desktopFocusWorkaroundTimer then desktopFocusWorkaroundTimer:stop() end\n      desktopFocusWorkaroundTimer=timer.doAfter(0.3,function()\n        -- 0.3s comes from https://github.com/Hammerspoon/hammerspoon/issues/581\n        -- it'd be slightly less ugly to use a \"space change completed\" callback (as per issue above) rather than\n        -- a crude timer, although that route is a lot more complicated\n        self:becomeMain()\n        desktopFocusWorkaroundTimer=nil --cleanup the timer\n      end)\n      self:becomeMain() --ensure space change actually takes place when necessary\n    end\n  end\n  return self\nend\n```\n\nIn the code, `self:becomeMain()` activates the app and sets the `NSAccessibilityMainAttribute` attribute, [here](https://github.com/Hammerspoon/hammerspoon/blob/931d38acbd7988dc2ec87a9c095bc50bd83ca584/Hammerspoon/HSuicore.m#L848-L850) (I’m not sure why they use `NSAccessibilityMainAttribute` instead of `kAXMainAttribute`, maybe it’s the same thing?). Next, they call `app:_bringtofront()` which further calls `SetFrontProcessWithOptions`, [here](https://github.com/Hammerspoon/hammerspoon/blob/931d38acbd7988dc2ec87a9c095bc50bd83ca584/Hammerspoon/HSuicore.m#L257-L264). Then finally, they do a bit more [crazy work to finish everything off](https://github.com/Hammerspoon/hammerspoon/blob/931d38acbd7988dc2ec87a9c095bc50bd83ca584/extensions/window/window.lua#L522-L534). The 0.3s delay looks a bit concerning for a window manager. I’m not quite sure how much of this code is necessary–I’d assume all of it to be robust–but it’s quite magical. \n\n@nikitabobko any opinions on this?","files":null}]}