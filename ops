{"author":{"id":"9fe94749ad50cfa05bda52147f3330a071f31f79f590050e64057a7783394911"},"ops":[{"type":3,"timestamp":1730417168,"nonce":"uc+/DARKE1X3EW8haf0lZgcSumI=","metadata":{"github-id":"IC_kwDOJl1IZM6SF308","github-url":"https://github.com/nikitabobko/AeroSpace/issues/653#issuecomment-2451012924"},"message":"FWIW I have those tiling options in Desktop\u0026Dock disabled.","files":null},{"type":3,"timestamp":1730431848,"nonce":"SpmffPjzLGw6fWz2uPNHtp6nWW0=","metadata":{"github-id":"IC_kwDOJl1IZM6SGsCK","github-url":"https://github.com/nikitabobko/AeroSpace/issues/653#issuecomment-2451226762"},"message":"I suspect that \n`            if window.observe(destroyedObs, kAXUIElementDestroyedNotification) \u0026\u0026` in MacWindow.swift never gets notification of windows closing.  \nBut I can't properly confirm, as I don't have access to a mac machine on which it works. \nAnd this is the first time I look at apple apis. I either don't know where docs are, or they really don't have anything beyond \"An accessibility object was disposed of.\" as description of this notification. \n\nAnother piece of observation: if I completely close iTerm, so that the app really quits, and then open it again, it will position itself correctly on all available space.","files":null},{"type":3,"timestamp":1730434290,"nonce":"ymzxXw0ix9Zs9FpZVjiWxYm6WiY=","metadata":{"github-id":"IC_kwDOJl1IZM6SGz-G","github-url":"https://github.com/nikitabobko/AeroSpace/issues/653#issuecomment-2451259270"},"message":"I got some progress, but I don't know what I'm doing :D\nIt's not a solution, it's narrowing down what is happening, but I'll run it locally, as I killed yabai and I don't want back. AeroSpace just works better :)\nSo, if I add \n```\n    private func garbageCollectWindows() {\n        // This is hilariously bad compared to notification driven way.\n        // I have no idea if the check for absence of attributes means that the window is actually closed,\n        // that's what I gathered from running it in debugger.\n        MacWindow.allWindows.lazy.filter { $0.app == self }.forEach {\n            if $0.axWindow.attrs.isEmpty{\n                $0.garbageCollect()\n            }\n        }\n    }\n    \n    static func garbageCollectClosedWindows() {\n        for app in Array(allAppsMap.values) {\n            app.garbageCollectWindows()\n        }\n    }\n``` \nto MacApp.swift, and then call it from gc() on every refresh after `MacApp.garbageCollectTerminatedApps()` then I get the behavior I expect. It reclaims space. I didn't notice any strange sideeffects, but a) test was really limited in time b) I don't have all the possible strange apps installed.","files":null}]}