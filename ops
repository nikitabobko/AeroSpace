{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":3,"timestamp":1718224925,"nonce":"3lymw2OrJipTKDHyAHimc3Z4uvU=","metadata":{"github-id":"IC_kwDOJl1IZM6A-fQC","github-url":"https://github.com/nikitabobko/AeroSpace/issues/264#issuecomment-2163864578"},"message":"**(1)** As long as your provide time measurements, that prove that `exec-and-forget aerospace list-workspaces --all | aerospace workspace next` is noticeably slower (at least 100ms) than `workspace --all next`, I'm ok with such feature.\n\nYou can measure time in the following way:\n```diff\ndiff --git a/Sources/AppBundle/config/HotkeyBinding.swift b/Sources/AppBundle/config/HotkeyBinding.swift\nindex 18aa3274..e0b73b73 100644\n--- a/Sources/AppBundle/config/HotkeyBinding.swift\n+++ b/Sources/AppBundle/config/HotkeyBinding.swift\n@@ -26,6 +26,7 @@ func activateMode(_ targetMode: String?) {\n     let targetBindings = targetMode.flatMap { config.modes[$0] }?.bindings ?? [:]\n     for binding in targetBindings.values where !hotkeys.keys.contains(binding.binding) {\n         hotkeys[binding.binding] = HotKey(key: binding.key, modifiers: binding.modifiers, keyDownHandler: {\n+            print(\"--- \\(binding.binding) pressed. The current active app is \\(getNativeFocusedWindow(startup: false)?.app.name). Time: \\(Date().timeIntervalSince1970)\")\n             if let activeMode {\n                 refreshSession(forceFocus: true) {\n                     _ = config.modes[activeMode]?.bindings[binding.binding]?.commands.run(.focused)\ndiff --git a/Sources/AppBundle/refresh.swift b/Sources/AppBundle/refresh.swift\nindex f8f3d489..8c1b9d7e 100644\n--- a/Sources/AppBundle/refresh.swift\n+++ b/Sources/AppBundle/refresh.swift\n@@ -5,6 +5,8 @@ import Common\n /// The function is called as a feedback response on every user input.\n /// The function is idempotent.\n func refreshSession\u003cT\u003e(startup: Bool = false, forceFocus: Bool = false, body: () -\u003e T) -\u003e T {\n+    // Once the focused app changes, you can track it in the log\n+    print(\"--- Process event. Focused app: \\(getNativeFocusedWindow(startup: false)?.app.name). Time: \\(Date().timeIntervalSince1970)\")\n     check(Thread.current.isMainThread)\n     gc()\n \n```\n\n**(2)** `--all` is an alias for `--monitor all`. I'd not rush adding the alias to `workspace` command. I'd prefer to add a more detailed argument `--monitor (all|mouse|focused)`\n\n**(3)** Please don't forget to update the `./docs/aerospace-workspace.adoc`\n\n**(4)** Please don't forget to report an error (stderr + exit-code) if both stdin is not empty and `--monitor` is supplied\n\n**(5)** Out of curiosity, why do you prefer to cycle workspace on all monitors? When `workspace (next|prev)` was initially introduced, it cycled all monitors, but then we realized that the preferred option is to only cycle workspaces on the focused monitor, that's why I changed the default #94 I want to understand if the decision was right\n\n---\n\nSidenotes (feel free to ignore them)\n\n**Sidenote 1.** I understand that AeroSpace could be faster #104, but it still makes me sad that the currently provided solution `aerospace list-workspaces --all | aerospace workspace --wrap-around next ` is slow enough for people to notice it.\n\nThe whole point of stdin consumption in `workspace` command was to avoid arguments parsing logic repetition/reuse. Aparently, stdin consumption is useless, since spawning bash and piping/calling takes noticeable time\n\n**Sidenote 2.** Maybe it's worth to implement common shell separators `\u0026\u0026`, `||`, `;`, and pipe operator inside TOML config. It's not that hard but unlocks a whole variety of use cases. E.g. `alt-q = 'close || close --quit-if-last-window'` (best effort close), `alt-1 = 'workspace 1 || workspace-back-and-forth'` (`--auto-back-and-forth` replacement)","files":null},{"type":3,"timestamp":1718225249,"nonce":"/Q84+geXE4OAacpq+QAT+fKYU6A=","metadata":{"github-id":"IC_kwDOJl1IZM6A-hNz","github-url":"https://github.com/nikitabobko/AeroSpace/issues/264#issuecomment-2163872627"},"message":"\u003e As long as your provide time measurements, that prove that `exec-and-forget aerospace list-workspaces --all | aerospace workspace next` is noticeably slower (at least 100ms) than `workspace --all next`, I'm ok with such feature.\n\nYou can compare `alt-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'` vs `alt-tab = 'workspace next'` before implementing `--monitor all`. `--monitor all` won't slow anything down","files":null},{"type":3,"timestamp":1718379289,"nonce":"4UKPbbTUdEBBBfNby8LkEigL6O8=","metadata":{"github-id":"IC_kwDOJl1IZM6BPWbv","github-url":"https://github.com/nikitabobko/AeroSpace/issues/264#issuecomment-2168284911"},"message":"After thinking about it more, I lean more towards supporting shell-like combinators (sidenote 2)\n\nIt's needed anyway to reduce flickering in this case https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n\nCopying flags from `list-workspaces` is an abstraction leak, and a violation of single responsibility principle.\n\nI will create the tracking issue for the shell-like combinators later and post here as a comment.","files":null},{"type":6,"timestamp":1718379307,"nonce":"HD3NTJ9AuMUjcPgxjlYfHw+dNyo=","metadata":{"github-id":"UCE_lALOJl1IZM6BPWbvzkiZKn4"},"target":"b3502784df986e1c009fa9b7880fa497ea902b53f5709b4b60e05cae7cbbcf3b","message":"After thinking more about it, I lean more towards supporting shell-like combinators (sidenote 2)\n\nIt's needed anyway to reduce flickering in this case https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n\nCopying flags from `list-workspaces` is an abstraction leak, and a violation of single responsibility principle.\n\nI will create the tracking issue for the shell-like combinators later and post here as a comment.","files":null},{"type":4,"timestamp":1718379289,"nonce":"qnVOntRlsZKDJJppBqLA0pIc5ko=","metadata":{"github-id":"CE_lADOJl1IZM6LtQaHzwAAAAMQjQcu"},"status":2}]}