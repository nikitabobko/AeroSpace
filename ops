{"author":{"id":"2d08e4816aca0a07db9878f126b0e7f6d6f1362eb9bc4804be6b33ff8d0a19ec"},"ops":[{"type":6,"timestamp":1718467080,"nonce":"+z+P6sjpNxt/3xtxRA+fJ7JaOLA=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2JWDw"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nBut the problem that it's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      (test %{app-bundle-id} == intellij || test %{app-bundle-id} == intellij.community) \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command will allow to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues will be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718467123,"nonce":"ZQtDXxHI2woBwMiOgUHqzc409FI=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2JWPs"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nBut the problem that it's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      (test %{app-bundle-id} == intellij || test %{app-bundle-id} == intellij.community) \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues will be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718467214,"nonce":"Yhp4RkGNPsGTJqF5gR7mZiE+DEM=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2JWqY"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      (test %{app-bundle-id} == intellij || test %{app-bundle-id} == intellij.community) \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues will be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718467296,"nonce":"IKGDEiqFzYPG8yio4XdBP2Fh5jI=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2JXFc"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues will be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718467590,"nonce":"/gSKVXWAKTP8FivqaE3X7thms/g=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2JYkA"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues will be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718625483,"nonce":"aojpwpnHzSbc5aXkoNhN4tjLkCo=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2cbe4"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} \u003c= 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718625545,"nonce":"2eqW6PIBYEsMz+IQIHkgfqs6WGk=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2cc3A"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} -le 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} -le 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718625640,"nonce":"udCAS4ckM060oFpeZ8tq6q5Gu08=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2ce70"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell combinators:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} -le 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} -le 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1718625667,"nonce":"qEih0CCK2d+iMzaS9X3Y8Bt9yhY=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zl2cflw"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} -le 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} -le 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1723381197,"nonce":"vAJDgYIm4QMTFXI5HJm+A2G3gMU=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmHddh8"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"Currently it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval - \u003c\u003c\u003c 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from file\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1725441196,"nonce":"CI9ir7nHT6InSdycKJQLnLwU6fk=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmPMAw0"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- `xargs` similar to GNU `xargs`\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1728333489,"nonce":"fBDv9w3a0zEguhSUrodcz+LXYBA=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmanfCI"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` similar to GNU `xargs`~~ UPD: stop turning it into a programming language\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1728335110,"nonce":"yTONYL5p5VqN9vNUGOUrkXtMdZk=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmaoCY8"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  list-workspaces --monitor mouse --visible | workspace -; workspace next\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` similar to GNU `xargs`~~ UPD: stop turning it into a programming language\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1728335127,"nonce":"UTirAMRNUtu6+SgYLsdwnS9YBBo=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmaoC1o"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I \\\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W \\\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` similar to GNU `xargs`~~ UPD: stop turning it into a programming language\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1728335180,"nonce":"T21En2Bfr0u32TLa0qw5YsIjGU4=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmaoEQY"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` similar to GNU `xargs`~~ UPD: stop turning it into a programming language\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1728335294,"nonce":"VBPBoOQ9YTLq4koirFfsJi5UnzY=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmaoHOA"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`, `!`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` similar to GNU `xargs`~~ UPD: stop turning it into a programming language\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1728337734,"nonce":"yn+gCfQ0yXfQiigrPUfb4we1nqA=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zmapCAY"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` similar to GNU `test` but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` similar to GNU `xargs`~~ UPD: stop turning it into a programming language\n- `echo` similar to GNU `echo`\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1735511692,"nonce":"JkPI2rLHCldbbBahxbQOxJ/tCtI=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zm3DndE"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` as in CLI but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` as in CLI~~ UPD: stop turning it into a programming language\n- `echo` as in CLI\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1735512026,"nonce":"u5Vc6jfhVR/oIR4k+y6/+OKs9aE=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zm3DpOc"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n  UPD: this particular suggestion was discarded\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` as in CLI but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` as in CLI~~ UPD: stop turning it into a programming language. It's better to provide single dash `-` to a bunch of commands as in \"consume stdin convention\". \n- ~~`echo` as in CLI~~ UPD: no use-cases anymore\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1735512039,"nonce":"JQ0+mwAo1x1GcUWtDcJXcpWFqJk=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zm3DpSo"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n  UPD: this particular suggestion was discarded\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` as in CLI but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` as in CLI~~ UPD: stop turning it into a programming language. It's better to provide single dash `-` to a bunch of commands as in \"consume stdin convention\". \n- ~~`echo` as in CLI~~ UPD: discarded. no use-cases anymore\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops","files":null},{"type":6,"timestamp":1735512567,"nonce":"olFmD+PspypHCSBsN2s7E/dn+lA=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zm3DsWk"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n  UPD: this particular suggestion was discarded\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` as in CLI but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` as in CLI~~ UPD: stop turning it into a programming language. It's better to provide single dash `-` to a bunch of commands as in \"consume stdin convention\". `xargs` and interpolation (which is another idea, that I discard right now) have a downside that it becomes impossible to statically parse all commands in \"AeroSpace script\"\n- ~~`echo` as in CLI~~ UPD: discarded. no use-cases anymore\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops.","files":null},{"type":6,"timestamp":1736170535,"nonce":"NzbpFkpfugT2AQIpICCoRgntJnA=","metadata":{"github-id":"UCE_lAHOJl1IZM6MXe53zm4sWWQ"},"target":"1c9eae631f6fbfbced705e959de70154d7b44f8316dfc12b617216c89de80d2c","message":"`Currently` it's impossible to consume stdout and exit codes of commands in toml config. One has to use `exec-and-forget`\n```toml\nalt-w = 'exec-and-forget aerospace workspace W --fail-if-noop || aerospace workspace-back-and-forth'\natl-tab = 'exec-and-forget aerospace list-workspaces --all | aerospace workspace next'\n```\n\nIt's slow. Communicating with the server back and forth from CLI client can take additional 100ms which becomes noticeable. Even if we fix the slowness somehow, annoying flickering will still remain an issue\n\nIt'd be cool if AeroSpace supported basic shell combinators (`||`, `\u0026\u0026`, `;`, `( )`)\n```toml\nalt-w = 'workspace W || workspace-back-and-forth'\natl-tab = 'list-workspaces --all | workspace next'\n```\n\nThat's a big feature that lays the foundation for a lot of things (basically the combinators allow programming custom logic):\n- It becomes possible to send a batch of commands from CLI to server at once, resulting in reduced flickering (because server already implements \"double buffering\" to reduce flickering)\n  https://nikitabobko.github.io/AeroSpace/goodness#use-trackpad-gestures-to-switch-workspaces\n  ```shell\n  aerospace eval 'list-workspaces --monitor mouse --visible | xargs workspace; aerospace workspace next'\n  ```\n  Or alternatively without `xargs`:\n  ```\n  aerospace eval 'list-workspaces --monitor mouse --visible | workspace -; workspace next'\n  ```\n- It fixes the ugliness of `on-window-detected` TOML callback. The new syntax is much more compact and powerful. It remains readable for people familiar with shell:\n  ```toml\n  on-window-detected = '''\n      test %{app-bundle-id} == com.jetbrains.intellij \u0026\u0026 move-workspace-to-monitor I\n          || test %{app-bundle-id} == com.google.Chrome \u0026\u0026 move-node-to-workspace W\n          || test %{app-bundle-id} == com.apple.dt.Xcode \u0026\u0026 (move-node-to-workspace X; exec-async 'echo hi!')\n  '''\n  ```\n- It opens up a possibility for even more powerful conditional gaps #60:\n  ```toml\n  [gaps]\n  outer.left = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  outer.right = 'test %{workspace-tiling-windows-count} --lessThan 2 \u0026\u0026 echo 100'\n  ```\n  UPD: this particular suggestion was discarded\n- It makes everything more universal and reusable. E.g. there won't be need to fix #107 if `config` command allows to query `on-window-detected` command:\n  ```shell\n  aerospace eval 'config --get on-window-detected | eval -'\n  ```\n\nOther subcommands that AeroSpace has to implement to make the feature complete:\n- `test` as in CLI but with possibility to interpolate AeroSpace special variables like `%{window-title}`, `%{window-name}`, `%{app-bundle-id}`, `%{workspace-tiling-windows-count}`, etc #150\n- ~~`xargs` as in CLI~~ UPD: stop turning it into a programming language. It's better to provide single dash `-` to a bunch of commands as in \"consume stdin convention\". `xargs` and interpolation (which is another idea, that I discard right now) have a downside that it becomes impossible to statically parse all commands in \"AeroSpace script\"\n- `echo` as in CLI. (use case: https://github.com/nikitabobko/AeroSpace/discussions/842)\n- `exec-async` as a replacement for `exec-and-forget`. The problem with `exec-and-forget` that it's not parsed as real CLI command, making it impossible to use the command with combinators\n- `eval` to evaluate \"AeroSpace script\" from `argv[1]`\n\nOverall a lot issues can be fixed: #264 #60 #54 #174 (partially) #104 (partially) #107 (kinda) #150\n\nOpen question: doesn't it open a pandora box of own script programming language? It kinda does. I hope that people will never ask for loops.","files":null},{"type":5,"timestamp":1718466751,"nonce":"m5FxgKp4Z0U79ePshAXGj3tbB1E=","metadata":{"github-id":"LE_lADOJl1IZM6MXe53zwAAAAMQ_FzG"},"added":["feature-proposal"],"removed":[]},{"type":5,"timestamp":1719868521,"nonce":"Su/l5IhFWmJhVpxOsFlfZLQQ93c=","metadata":{"github-id":"LE_lADOJl1IZM6MXe53zwAAAAMcH2_c"},"added":["1.0-blocker"],"removed":[]},{"type":3,"timestamp":1723379514,"nonce":"QXpnasfoIquUzMFEoO8FA6xFIv4=","metadata":{"github-id":"IC_kwDOJl1IZM6ID-0e","github-url":"https://github.com/nikitabobko/AeroSpace/issues/278#issuecomment-2282745118"},"message":"Draft:\n\n```\non-window-detected = '''\nif test %{app-bundle-id} == com.jetbrains.intellij.ce || test %{app-bundle-id} == com.jetbrains.intellij do\n    move-workspace-to-monitor I\nelif test %{app-bundle-id} == com.google.Chrome do\n    move-node-to-workspace W\nelif test %{app-bundle-id} == com.apple.dt.Xcode do\n    move-node-to-workspace X; exec-async 'echo hi!'\nend\n'''\n```","files":null},{"type":6,"timestamp":1723379571,"nonce":"p5eItia0tnoEkWRU9gwUROlpDFE=","metadata":{"github-id":"UCE_lALOJl1IZM6ID-0ezkz5zSU"},"target":"4e49affaef8cdff33883dabb0da2cf1156aaf0b18d433392b58dd5d36a0da789","message":"Draft:\n\n```\non-window-detected = '''\nif test %{app-bundle-id} == com.jetbrains.intellij.ce || test %{app-bundle-id} == com.jetbrains.intellij do\n    move-workspace-to-monitor I # [I]de\nelif test %{app-bundle-id} == com.google.Chrome do\n    move-node-to-workspace W # [W]eb browser\nelif test %{app-bundle-id} == com.apple.dt.Xcode do\n    move-node-to-workspace X; exec-async 'echo hi!' # [X]code\nend\n'''\n```","files":null},{"type":6,"timestamp":1728341760,"nonce":"As9zmiz5l4uQ7/GcxEHhw+ww02s=","metadata":{"github-id":"UCE_lALOJl1IZM6ID-0ezlGxTmc"},"target":"4e49affaef8cdff33883dabb0da2cf1156aaf0b18d433392b58dd5d36a0da789","message":"Draft:\n\n```\non-window-detected = '''\n    if test %{app-bundle-id} == com.jetbrains.intellij.ce || test %{app-bundle-id} == com.jetbrains.intellij do\n        move-workspace-to-monitor I # [I]de\n    elif test %{app-bundle-id} == com.google.Chrome do\n        move-node-to-workspace W # [W]eb browser\n    elif test %{app-bundle-id} == com.apple.dt.Xcode do\n        move-node-to-workspace X; exec-async 'echo hi!' # [X]code\n    end\n'''\n```","files":null},{"type":6,"timestamp":1735512140,"nonce":"uQ2e0p0s5wtwN0X34qHGsVJDuIQ=","metadata":{"github-id":"UCE_lALOJl1IZM6ID-0ezliiPhU"},"target":"4e49affaef8cdff33883dabb0da2cf1156aaf0b18d433392b58dd5d36a0da789","message":"Draft:\n\n```\non-window-detected = '''\n    if test --app-bundle-id com.jetbrains.intellij.ce || test --app-bundle-id com.jetbrains.intellij do\n        move-workspace-to-monitor I # [I]de\n    elif test --app-bundle-id == com.google.Chrome do\n        move-node-to-workspace W # [W]eb browser\n    elif test --app-bundle-id == com.apple.dt.Xcode do\n        move-node-to-workspace X; exec-async 'echo hi!' # [X]code\n    end\n'''\n```","files":null},{"type":6,"timestamp":1735512158,"nonce":"YU0yQzpMEMSwFHaWXr/sygKTU+c=","metadata":{"github-id":"UCE_lALOJl1IZM6ID-0ezliiPmM"},"target":"4e49affaef8cdff33883dabb0da2cf1156aaf0b18d433392b58dd5d36a0da789","message":"Draft:\n\n```\non-window-detected = '''\n    if test --app-bundle-id com.jetbrains.intellij.ce || test --app-bundle-id com.jetbrains.intellij do\n        move-workspace-to-monitor I # [I]de\n    elif test --app-bundle-id com.google.Chrome do\n        move-node-to-workspace W # [W]eb browser\n    elif test --app-bundle-id com.apple.dt.Xcode do\n        move-node-to-workspace X; exec-async 'echo hi!' # [X]code\n    end\n'''\n```","files":null},{"type":3,"timestamp":1723380460,"nonce":"mL3MgAE9xBPWcJ2Lg0AM4S14wZQ=","metadata":{"github-id":"IC_kwDOJl1IZM6IEABJ","github-url":"https://github.com/nikitabobko/AeroSpace/issues/278#issuecomment-2282750025"},"message":"Since it's a custom language, it'd be good to be able to print AST for better discoverability and debugging\n```\n$ aerospace eval --print-ast-and-exit '\nif test %{app-bundle-id} == com.jetbrains.intellij.ce do\n    move-workspace-to-monitor I\nend\n\necho 'hi!'\n'\n\nIfBlock\n    IfCondition\n        Command\n            ['test', '%{app-bundle-id}', '==', 'com.jetbrains.intellij.ce']\n    IfThenBlock\n        Command\n            ['move-workspace-to-monitor', 'I']\nCommand\n    ['echo', 'hi!']\n```","files":null},{"type":6,"timestamp":1723380486,"nonce":"h5P+2F85ICcnYRmZaDbTRCYIPpM=","metadata":{"github-id":"UCE_lALOJl1IZM6IEABJzkz53ds"},"target":"43b520a91e8272aff14663dbc819a639fddb192766da6de7de2d3d475cd9f123","message":"Since it's a custom language, it'd be good to be able to print AST (Abstract Syntax Tree) for better discoverability and debugging\n```\n$ aerospace eval --print-ast-and-exit '\nif test %{app-bundle-id} == com.jetbrains.intellij.ce do\n    move-workspace-to-monitor I\nend\n\necho 'hi!'\n'\n\nIfBlock\n    IfCondition\n        Command\n            ['test', '%{app-bundle-id}', '==', 'com.jetbrains.intellij.ce']\n    IfThenBlock\n        Command\n            ['move-workspace-to-monitor', 'I']\nCommand\n    ['echo', 'hi!']\n```","files":null},{"type":6,"timestamp":1735512206,"nonce":"+IpsRiwfFfDlkF35lMcL553sVAw=","metadata":{"github-id":"UCE_lALOJl1IZM6IEABJzliiPwg"},"target":"43b520a91e8272aff14663dbc819a639fddb192766da6de7de2d3d475cd9f123","message":"Since it's a custom language (unfortunately), it'd be good to be able to print AST (Abstract Syntax Tree) for better discoverability and debugging\n```\n$ aerospace eval --print-ast-and-exit '\nif test --app-bundle-id com.jetbrains.intellij.ce do\n    move-workspace-to-monitor I\nend\n\necho 'hi!'\n'\n\nIfBlock\n    IfCondition\n        Command\n            ['test', '--app-bundle-id', 'com.jetbrains.intellij.ce']\n    IfThenBlock\n        Command\n            ['move-workspace-to-monitor', 'I']\nCommand\n    ['echo', 'hi!']\n```","files":null}]}