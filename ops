{"author":{"id":"9006205d7e210990dd597a6791ceb19005a9c2879cb6e514c850aedc184b31c2"},"ops":[{"type":3,"timestamp":1725528993,"nonce":"Ilt4eNXPUbhkv6JncnCyUIJGTxQ=","metadata":{"github-id":"IC_kwDOJl1IZM6K8SVj","github-url":"https://github.com/nikitabobko/AeroSpace/issues/490#issuecomment-2331059555"},"message":"I would tend to agree with your preferences here, especially with the case statements. I guess the caveat of code formatters is that they can't satisfy everyones preferences - useful for team projects, maybe not so much when you alone are going to spend the most time in the codebase.\n\nUnfortunately, I can't see or think of any way to enforce that case linting rule alongside a format with swiftlint. I wonder if the maintainers would consider that a bug, I'm guessing right now the tool just runs the format as an afterthought.\n\nIt's looking even worse for the multiline conditions \u0026 call chain indentation, since swiftlint doesn't explicitly enforce it as a rule at all. It's left up to user preference, which the formatting aspect clearly disagrees with.\n\nThere is another popular formatter ([SwiftFormat by Nick Lockwood](https://github.com/nicklockwood/SwiftFormat)) that is a tried and tested tool. This is what I use for my projects. Although this would also mean yet another tool to depend on in the project.\n\nThis does have [a rule for indenting case inside switches](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#indent) and is generally a lot more configurable.\nStill, I can't see rules for multiline indentation in the way that you're after. There is [wrapMultiLineStatementBraces](https://github.com/nicklockwood/SwiftFormat/blob/main/Rules.md#wrapmultilinestatementbraces) that takes a different approach to try and make the distinction between the condition and the body clearer. Personally I'm indifferent to this rule, but I know it's not for everyone.\n\nHere's a diff of `Sources/AppBundle/command/Command.swift` to illustrate the indented case. Note that I didn't configure any other rules yet so you'll see the other changes it's decided to make here:\n```diff\ndiff --git a/Sources/AppBundle/command/Command.swift b/Sources/AppBundle/command/Command.swift\nindex 8f93b32..6e27890 100644\n--- a/Sources/AppBundle/command/Command.swift\n+++ b/Sources/AppBundle/command/Command.swift\n@@ -57,7 +57,7 @@ extension [Command] {\n     // fileprivate because don't want to expose an interface where a more than one commands have shared stdin\n     fileprivate func _run(_ state: CommandMutableState, stdin: String = \"\") -\u003e Bool {\n         check(Thread.current.isMainThread)\n-        check(self.count == 1 || stdin.isEmpty)\n+        check(count == 1 || stdin.isEmpty)\n         var result = true\n         for command in self {\n             if TrayMenuModel.shared.isEnabled || isAllowedToRunWhenDisabled(command) {\n@@ -78,8 +78,8 @@ enum CommandSubject: Equatable {\n extension EffectiveLeaf {\n     var asCommandSubject: CommandSubject {\n         switch focus.asLeaf {\n-            case .window(let w): .window(w)\n-            case .emptyWorkspace(let w): .emptyWorkspace(w.name)\n+            case let .window(w): .window(w)\n+            case let .emptyWorkspace(w): .emptyWorkspace(w.name)\n         }\n     }\n }\n@@ -87,15 +87,15 @@ extension EffectiveLeaf {\n extension CommandSubject {\n     var windowOrNil: Window? {\n         return switch self {\n-            case .window(let window): window\n+            case let .window(window): window\n             case .emptyWorkspace: nil\n         }\n     }\n \n     var workspace: Workspace {\n         return switch self {\n-            case .window(let window): window.visualWorkspace ?? focus.workspace\n-            case .emptyWorkspace(let workspaceName): Workspace.get(byName: workspaceName)\n+            case let .window(window): window.visualWorkspace ?? focus.workspace\n+            case let .emptyWorkspace(workspaceName): Workspace.get(byName: workspaceName)\n         }\n     }\n }\n\n```\n\nAll of the above seems to come with caveats and I don't think there is a perfect solution here, unfortunately. I appreciate you taking the time to investigate this a little - I'm happy to close the issue if you don't want to take it any further.","files":null}]}