{"author":{"id":"91b4e3d081f8e61ef921884a2be1497b44faa575bd0f27aa7276b37b1111f0fc"},"ops":[{"type":3,"timestamp":1731195285,"nonce":"oV5JnzUt3ofgoZ+STNjgW/4o+N8=","metadata":{"github-id":"IC_kwDOJl1IZM6TA9gO","github-url":"https://github.com/nikitabobko/AeroSpace/issues/242#issuecomment-2466502670"},"message":"Yep, this seems to happen when any macOS application hangs. I have seen it with JetBrains IDEs and VS Code.","files":null},{"type":3,"timestamp":1733024235,"nonce":"CgFoGk4PDp7evc9Dz89gX/9GXEU=","metadata":{"github-id":"IC_kwDOJl1IZM6VlLlW","github-url":"https://github.com/nikitabobko/AeroSpace/issues/242#issuecomment-2509551958"},"message":"Here is a simple example program which reproduces the issue when the \"lock\" button is clicked\n```c++\n#import \u003catomic\u003e\n#import \u003cchrono\u003e\n#import \u003ccsignal\u003e\n#import \u003cthread\u003e\n\n#import \u003cCocoa/Cocoa.h\u003e\n\nnamespace {\n\nstd::atomic_bool LOOP { false };\n\nvoid handle(int) { LOOP.store(false, std::memory_order::relaxed); }\n\n} // namespace\n\n@interface AppDelegate : NSObject \u003cNSApplicationDelegate, NSWindowDelegate\u003e\n@end\n\n@implementation AppDelegate\n\n- (void)foo {\n    using namespace std::chrono_literals;\n\n    LOOP.store(true, std::memory_order::relaxed);\n    while (LOOP.load(std::memory_order::relaxed)) {\n        std::this_thread::sleep_for(2s);\n    }\n}\n\n- (void)applicationDidFinishLaunching:(NSNotification*)aNotification {\n    NSWindow* window = [[NSWindow alloc]\n        initWithContentRect:NSMakeRect(100, 100, 400, 300)\n                  styleMask:NSWindowStyleMaskTitled | NSWindowStyleMaskClosable |\n                            NSWindowStyleMaskMiniaturizable | NSWindowStyleMaskResizable\n                    backing:NSBackingStoreBuffered\n                      defer:NO];\n    [window setDelegate:self];\n    [window makeKeyAndOrderFront:nil];\n\n    NSButton* button = [[NSButton alloc] initWithFrame:NSMakeRect(150, 135, 100, 30)];\n    [button setTitle:@\"Lock\"];\n    [button setTarget:self];\n    [button setAction:@selector(foo)];\n    [button setBezelStyle:NSBezelStyleRounded];\n    [[window contentView] addSubview:button];\n\n    [NSApp setActivationPolicy:NSApplicationActivationPolicyRegular];\n}\n\n- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication*)sender {\n    return YES;\n}\n\n@end\n\nint main(int argc, char const* argv[]) {\n    std::signal(SIGUSR1, handle);\n\n    @autoreleasepool {\n        NSApplication* application = [NSApplication sharedApplication];\n        AppDelegate*   delegate    = [[AppDelegate alloc] init];\n        [application setDelegate:delegate];\n        [application run];\n    }\n\n    return 0;\n}\n```\n\nAnd here is a flamegraph of the hang:\n\u003cimg width=\"1404\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8c9e9392-5d3e-4784-a971-94170b64ae02\"\u003e\n\nNot sure I entirely understand what is going on here—there should not be any windows getting closed to clean up at the time.","files":null},{"type":6,"timestamp":1733024278,"nonce":"KLMfIeq6Cd5mT+lJXD1Gf0Q4gU0=","metadata":{"github-id":"UCE_lALOJl1IZM6VlLlWzlZ0qX8"},"target":"4ce7dbf425af69f0cecb0790ef73d35ec8a2f4b80510f2f5d8e0be0585e327bf","message":"Here is a simple example program which reproduces the issue when the \"lock\" button is clicked\n```c++\n#import \u003catomic\u003e\n#import \u003cchrono\u003e\n#import \u003ccsignal\u003e\n#import \u003cthread\u003e\n\n#import \u003cCocoa/Cocoa.h\u003e\n\nnamespace {\n\nstd::atomic_bool LOOP { false };\n\nvoid handle(int) { LOOP.store(false, std::memory_order::relaxed); }\n\n} // namespace\n\n@interface AppDelegate : NSObject \u003cNSApplicationDelegate, NSWindowDelegate\u003e\n@end\n\n@implementation AppDelegate\n\n- (void)foo {\n    using namespace std::chrono_literals;\n\n    LOOP.store(true, std::memory_order::relaxed);\n    while (LOOP.load(std::memory_order::relaxed)) {\n        std::this_thread::sleep_for(2s);\n    }\n}\n\n- (void)applicationDidFinishLaunching:(NSNotification*)aNotification {\n    NSWindow* window = [[NSWindow alloc]\n        initWithContentRect:NSMakeRect(100, 100, 400, 300)\n                  styleMask:NSWindowStyleMaskTitled | NSWindowStyleMaskClosable |\n                            NSWindowStyleMaskMiniaturizable | NSWindowStyleMaskResizable\n                    backing:NSBackingStoreBuffered\n                      defer:NO];\n    [window setDelegate:self];\n    [window makeKeyAndOrderFront:nil];\n\n    NSButton* button = [[NSButton alloc] initWithFrame:NSMakeRect(150, 135, 100, 30)];\n    [button setTitle:@\"Lock\"];\n    [button setTarget:self];\n    [button setAction:@selector(foo)];\n    [button setBezelStyle:NSBezelStyleRounded];\n    [[window contentView] addSubview:button];\n\n    [NSApp setActivationPolicy:NSApplicationActivationPolicyRegular];\n}\n\n- (BOOL)applicationShouldTerminateAfterLastWindowClosed:(NSApplication*)sender {\n    return YES;\n}\n\n@end\n\nint main(int argc, char const* argv[]) {\n    std::signal(SIGUSR1, handle);\n\n    @autoreleasepool {\n        NSApplication* application = [NSApplication sharedApplication];\n        AppDelegate*   delegate    = [[AppDelegate alloc] init];\n        [application setDelegate:delegate];\n        [application run];\n    }\n\n    return 0;\n}\n```\n\nAnd here is a flamegraph of the hang:\n\u003cimg width=\"1404\" alt=\"image\" src=\"https://github.com/user-attachments/assets/8c9e9392-5d3e-4784-a971-94170b64ae02\"\u003e\n\nNot sure I entirely understand what is going on here, in particular why it appears to be stuck in cleanup/window disposal code—there should not be any windows getting closed to clean up at the time.","files":null},{"type":3,"timestamp":1733027829,"nonce":"M3jdFLMBs+vbjQAp68Io6F7Clro=","metadata":{"github-id":"IC_kwDOJl1IZM6VlPho","github-url":"https://github.com/nikitabobko/AeroSpace/issues/242#issuecomment-2509568104"},"message":"I wonder whether the global accessibility API timeout of 1 second is a bit too high, given that:\n* It appears hung applications will always consume the full timeout.\n* We touch every application and window on every input in `detectNewWindowsAndAttachThemToWorkspaces()`.","files":null}]}