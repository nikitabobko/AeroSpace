{"author":{"id":"874e9296cdffc3475c4c2fde289194b3524f2f9809e119df0bb225b4369a5c4f"},"ops":[{"type":3,"timestamp":1732495212,"nonce":"pnw+x+TVVZ/6W3HLQTpqNY6CeBY=","metadata":{"github-id":"IC_kwDOJl1IZM6UzPIZ","github-url":"https://github.com/nikitabobko/AeroSpace/issues/175#issuecomment-2496459289"},"message":"it seems that a bug has been fixed, now `exec-on-workspace-change` works, I share my sketchybar lua config that replace show the apps in each aerospace workspace\n\nsupport multiple monitors\n\n\u003cimg width=\"315\" alt=\"Untitled\" src=\"https://github.com/user-attachments/assets/6eed99b2-d46d-4daa-8a20-855f473d2e10\"\u003e\n\n\u003cimg width=\"326\" alt=\"Untitled\" src=\"https://github.com/user-attachments/assets/1cbd1071-f518-483e-9865-54dcc47dbeb7\"\u003e\n\n\n`config-aerospace.toml`\n```toml\nexec-on-workspace-change = [\n  '/bin/bash', '-c', '/opt/homebrew/bin/sketchybar --trigger aerospace_workspace_change FOCUSED_WORKSPACE=$AEROSPACE_FOCUSED_WORKSPACE'\n]\n```\n\n`items/workspaces.lua`\n```lua\nlocal colors = require(\"colors\")\nlocal settings = require(\"settings\")\nlocal app_icons = require(\"helpers.app_icons\")\nlocal sbar = require(\"sketchybar\")\n\nsbar.add(\"event\", \"aerospace_workspace_change\")\n\nlocal workspaces = {}\n\nlocal function add_workspace(space_id, workspace_id)\n  local i = workspace_id\n  local space = sbar.add(\"space\", \"space.\" .. i, {\n    space = space_id,\n    icon = {\n      font = { family = settings.font.numbers, size = 18 },\n      string = workspace_id,\n      padding_left = 15,\n      padding_right = 8,\n      color = colors.white,\n      highlight_color = colors.green,\n    },\n    label = {\n      padding_right = 20,\n      color = colors.grey,\n      highlight_color = colors.white,\n      font = \"sketchybar-app-font:Regular:16.0\",\n      y_offset = -1,\n    },\n    padding_right = 1,\n    padding_left = 1,\n    background = {\n      color = colors.bg1,\n      border_width = 1,\n      height = 26,\n      border_color = colors.black,\n    },\n    popup = { background = { border_width = 5, border_color = colors.black } },\n  })\n\n  workspaces[i] = space\n\n  -- Single item bracket for space items to achieve double border on highlight\n  local space_bracket = sbar.add(\"bracket\", { space.name }, {\n    background = {\n      color = colors.transparent,\n      border_color = colors.bg2,\n      height = 28,\n      border_width = 2,\n    },\n  })\n\n  -- Padding space\n  sbar.add(\"space\", \"space.padding.\" .. i, {\n    space = i,\n    script = \"\",\n    width = settings.group_paddings,\n  })\n\n  space:subscribe(\"space_change\", function(env)\n    local selected = env.SELECTED == \"true\"\n    space:set({\n      icon = { highlight = selected },\n      label = { highlight = selected },\n      background = { border_color = selected and colors.black or colors.bg2 },\n    })\n    space_bracket:set({\n      background = { border_color = selected and colors.grey or colors.bg2 },\n    })\n  end)\nend\n\n-- Function to execute shell commands and return the output\nlocal function execute_command(command)\n  local handle = io.popen(command)\n  local result = handle:read(\"*a\")\n  handle:close()\n  return result\nend\n\n-- Get monitor information\nlocal monitors = {}\nlocal monitor_output = execute_command(\"aerospace list-monitors\")\nfor line in monitor_output:gmatch(\"[^\\r\\n]+\") do\n  local id, name = line:match(\"(%d+) | (.+)\")\n  if id and name then\n    monitors[tonumber(id)] = name\n  end\nend\n\n-- Get workspaces for each monitor\nfor monitor_id, _ in pairs(monitors) do\n  local workspace_output = execute_command(\"aerospace list-workspaces --monitor \" .. monitor_id)\n  for workspace_id in workspace_output:gmatch(\"[^\\r\\n]+\") do\n    add_workspace(monitor_id, tonumber(workspace_id))\n  end\nend\n\nlocal space_window_observer = sbar.add(\"item\", {\n  drawing = false,\n  updates = true,\n})\n\nspace_window_observer:subscribe({ \"aerospace_workspace_change\",}, function(env)\n  sbar.exec([[aerospace list-windows --workspace ]] .. tostring(env.FOCUSED_WORKSPACE) .. [[ | awk -F '|' '{print $2}']], function(appNames)\n    local appCounts = {}\n    -- Split the input string by newline into individual app names\n    for appName in string.gmatch(appNames, \"[^\\r\\n]+\") do\n      -- Trim leading and trailing whitespace\n      appName = appName:match(\"^%s*(.-)%s*$\")\n      if appCounts[appName] then\n        appCounts[appName] = appCounts[appName] + 1\n      else\n        appCounts[appName] = 1\n      end\n    end\n\n    local icon_line = \"\"\n    local no_app = true\n    for app, count in pairs(appCounts) do\n      no_app = false\n      local lookup = app_icons[app]\n      local icon = ((lookup == nil) and app_icons[\"Default\"] or lookup)\n      icon_line = icon_line .. icon\n    end\n  \n    if (no_app) then\n      icon_line = \" â€”\"\n    end\n\n    sbar.animate(\"tanh\", 10, function()\n      workspaces[tonumber(env.FOCUSED_WORKSPACE)]:set({ label = icon_line })\n    end)\n  end)\nend)\n```","files":null}]}